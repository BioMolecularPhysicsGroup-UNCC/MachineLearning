% test driver for control functions within the SPLOC toolset
% ------------------------------------------------------------------------
% SPLOC = Supervised Projective Learning with Orthogonal Completeness
%
% This test driver checks sploc functions that substantially control how
% other sploc functions run. 
% 
% In addition to testing these functions, the purpose of this test driver
% is to serve as an example for how to use these sploc functions. 
%
% Toolset: I/O directory structure:
% 
% current directory --> sub-directories: splocLibrary
%                                        input
%                                        splocLog
%                                        training
%                                        basisComparison
%                                        classification
%                                        analysis
%                 
% INPUT: (general description) 
% Many types of files can be read by a variety of sploc functions. Each
% such file must be formated according to specifications. In many cases, 
% the output files generated by some sploc functions will serve as input
% files for other sploc functions, which will usually have dependence. For
% example, under supervised training on various datastreams that are known
% to be functional or nonfunctional, a basis set of vectors is optimized
% to successfully classify an unknown datastream. At a later time, new
% data that comes in can be processed simply by reading in an input file
% that contains the relevant basis vectors for discrimination, without 
% redoing the training. Hence, the output from training becomes the input
% for classification along with more data. The read functions are designed
% to have flexibility so that no specific rules need to be followed.
% 
% verbosity: Specifies amount of intermediate processing steps to report.
%            Functions exist to output certain data, while verbosity has
%            no connection to that type of output and how it is reported.
%       ---> verbosity extracts hidden information within SPLOC functions.
%       ---> verbosity controls optional intermediate results ONLY:
% default: 0 => no output except what might get dumped into main log file.
% process: 1 => same as 0, writing key processing data in other log files.
% summary: 2 => same as 1, writing figures to files showing key relations.
% display: 3 => same as 2, with figures displayed on the screen, sometimes
%               with a pause, and/or with additional output printed to the
%               command window. Useful to understand how the code works!
%       ---> All printed figures have the same file type (fig, png, etc).
%       ---> Other log files are written in separate folders/directories.
% ------------------------------------------------------------------------
% 
% PROCESS: 
% SPLOC is comprised of many MATLAB functions that define the SPLOCtoolset
% See splocToolsetVersion() for detail comments about the SPLOC toolset.
%
% Each function that is tested here is listed in the menu.
%%                                                     start from sctratch
clear all
clc
%%                                                     build function menu
test_initializeSPLOC = false;
test_getOutputFileName = false;
test_getInputFileName = false;
test_setVerbosity = false;
test_setGraphicFileType = false;
test_setDataMatrixFormat = false;
test_setPlotCongruencySpectrum = false;
disp('  ');
disp( dividerLine('select function to test') );
disp('1. initializeSPLOC()');
disp('2. getOutputFileName()');
disp('3. getInputFileName()');
disp('4. setVerbosity()');
disp('5. setGraphicFileType()');
disp('6. setDataMatrixFormat()');
disp('7. setPlotCongruencySpectrum()');
disp('  ');
nMenu = input('   Enter option: ');
   switch nMenu
       case 1
       test_initializeSPLOC = true;
       case 2
       test_getOutputFileName = true;
       case 3
       test_getInputFileName = true;
       case 4
       test_setVerbosity = true;
       case 5
       test_setGraphicFileType = true;
       case 6
       test_setDataMatrixFormat = true;
       case 7
       test_setPlotCongruencySpectrum = true;
       otherwise
       error('unknown option');
   end
%%                                                  test initializeSPLOC()
   if( test_initializeSPLOC )
   disp('  ');
   disp( dividerLine('runing initializeSPLOC') );
   initializeSPLOC
   pause
   disp('  ');
   disp( dividerLine('runing initializeSPLOC(3,"gType","pdf")') );
   initializeSPLOC(3,'gType','pdf')
   pause
   disp('  ');
   msg = 'runing initializeSPLOC("wType","append","gType","pdf")';
   disp( dividerLine(msg) );
   initializeSPLOC('wType','append','gType','pdf')
   pause  
   disp('  ');
   msg = 'runing initializeSPLOC(1,"wType","append","gType","jpg")';
   disp( dividerLine(msg) );
   initializeSPLOC(1,'wType','append','gType','jpg')
   pause 
   disp('  ');
   msg = 'runing initializeSPLOC(1,"fName","test000","gType","png")';
   disp( dividerLine(msg) );
   initializeSPLOC('fName','test000','gType','png')
   pause 
   disp('  ');
   msg = ['runing initializeSPLOC(1,"fName",', ...
           '"test000","gType","eps")'];
   disp( dividerLine(msg) );
   initializeSPLOC('fName','test000','gType','eps')
   pause 
   disp('  ');
   msg = ['runing initializeSPLOC(1,"fName",', ...
           '"test000","wType","append","gType","eps")'];
   disp( dividerLine(msg) );
   initializeSPLOC('fName','test000','wType','append','gType','eps')
   % Note that the default summary log file name is sploc.log
   % Using 'fName', the user can change the name of the summary log file.
   % In this case the summary log file name will be test000.log
   % located in the directory splocLog
   pause 
   disp('  ');
   disp( dividerLine('EXPECT ERROR') );
   msg = ['copy from script and paste to command window ', ...
          'to create more errors'];
   disp( dividerLine(msg) );
   system( ' rm splocLog/test000.log' );             % create missing file
% ----------------------------------------------------- examples of errors
   disp('  ');
   fprintf(2,'Example of ERRORS:  You are suppose to get an error!\n');
   fprintf(2,'investigate this script to see why error occurred. \n');
   disp('  ');
   msg = ['runing initializeSPLOC(1,"fName",', ...
           '"test000","wType","append","gType","eps")'];
   disp( dividerLine(msg) );
   initializeSPLOC('fName','test000','wType','append','gType','eps')
   end
%%                                                test getOutputFileName()
   if( test_getOutputFileName )
   clc
   disp( dividerLine('abcFolder does not exist') );
   system('ls abcFolder','-echo');
   subFolder = 'abcFolder';
   data = 1:10;
   outFileName = getOutputFileName(subFolder,'data.txt');
%  REMARK: If subfolder does not exist, it will be created on the fly.
%          Only subfolders are created.
   dlmwrite(outFileName,data);
   disp( dividerLine('abcFolder and data.txt within exists') );
   system('ls abcFolder','-echo');
   pause
   disp('  ');
   disp('remove abcFolder and its contents');
   system('rm -R abcFolder','-echo');
   disp('   ');
   system('ls abcFolder','-echo');
   end
%%                                                 test getInputFileName()
   if( test_getInputFileName )   
   fileName = getInputFileName('input','ex_FUN2colDS.txt');
   disp('   ');
   disp(['The file ',fileName,' should be found as part of DEMO']);
   disp('  ');
   pause
   disp( dividerLine('EXPECT ERROR') );
   msg = ['copy from script and paste to command window ', ...
          'to create more errors'];
   disp( dividerLine(msg) );
% ----------------------------------------------------- examples of errors
   disp('  ');
   fprintf(2,'Example of ERRORS:  You are suppose to get an error!\n');
   fprintf(2,'investigate this script to see why error occurred. \n');
   disp('  ');
   fileName = getInputFileName('input','ex_nonExistent.txt');      % error
   fileName = getInputFileName('abcFolder','ex_nonExistent.txt');  % error
   disp(fileName);
   end
%%                                                     test setVerbosity()
% FIX ME:           verbosity levels should be generalized in next version
   if( test_setVerbosity )
      for vo=-1:4
      vf = setVerbosity(vo);         % confines verbosity to allowed range
      disp([vo,vf])
      end
   vf = setVerbosity('5');                             % leads to an error
   end
%%                                               test setGraphicFileType()
   if( test_setGraphicFileType )
   disp('   ');
   initializeSPLOC('gType','fig');         % sets graphic file type to fig
   disp( dividerLine('current figure type = fig') );
   disp('changing to png');
   setGraphicFileType('png');              % changes global SPLOC variable
   disp('    ');
   pause
   disp( dividerLine('EXPECT ERROR') );
   disp('changing to xyz');
   pause
   setGraphicFileType('xyz');                          % leads to an error
   end
%%                                              test setDataMatrixFormat()
   if( test_setDataMatrixFormat )
   disp( dividerLine('run setDataMatrixFormat() three times') );
      for j=1:3
      matrixFormat = setDataMatrixFormat();                  % interactive
      disp('  ');
      disp(matrixFormat)                                          % output
      end
   disp('  ');
   disp( dividerLine('run setDataMatrixFormat() in other modes') );
   matrixFormat1 = setDataMatrixFormat('xyz-xyz-xyz',3)
   disp('   ');
   pause
   matrixFormat2 = setDataMatrixFormat('xxx-yyy-zzz',2)
   disp('   ');
   pause
   matrixFormat = setDataMatrixFormat('notVectored',2)      % 2 is ignored
   disp('   ');
   pause
   matrixFormat = setDataMatrixFormat('notVectored')      % dim not needed
   disp('   ');
   pause
   disp('look at the script to see how to use setDataMatrixFormat()');
   disp('  ');
% ----------------------------------------------- useful to use as a check
   disp( dividerLine('used as a check') );
   matrixFormat = setDataMatrixFormat(matrixFormat1)
   matrixFormat = setDataMatrixFormat(matrixFormat2)
   disp('  ');
   pause
   disp( dividerLine('EXPECT ERROR') );
   msg = ['copy from script and paste to command window ', ...
          'to create more errors'];
   disp( dividerLine(msg) );
% ----------------------------------------------------- examples of errors
   disp('  ');
   fprintf(2,'Example of ERRORS:  You are suppose to get an error!\n');
   fprintf(2,'investigate this script to see why error occurred. \n');
   disp('  ');
   matrixFormat1.ptype = 'bla';
   matrixFormat = setDataMatrixFormat(matrixFormat1)               % error
   matrixFormat = setDataMatrixFormat('xyz-xyz-xyz');              % error
   end
   %%                                     test setPlotCongruencySpectrum()
   if( test_setPlotCongruencySpectrum )   
   disp('   ');
   disp('USAGE: ');
   disp('  ');
   disp('setPlotCongruencySpectrum(splitSpectrum,showGMean) ');
   disp('splitSpectrum = (-1,1) => show data as (all top, top & bottom)');
   disp('    showGMean = ( 0,1) => show geometric mean for d-modes');
   disp('  ');
   disp('MUST RUN: initializeSPLOC() first');
   disp('  ');
   logFile = ['testControl',mfilename];
   initializeSPLOC(1,'fName',logFile,'gType','png');
   disp('  examples:');
   disp('  setPlotCongruencySpectrum(1,1) ');
   setPlotCongruencySpectrum(1,1);
   disp('  setPlotCongruencySpectrum(-1,1) ');
   setPlotCongruencySpectrum(-1,1);
   disp('  setPlotCongruencySpectrum(1,0) ');
   setPlotCongruencySpectrum(1,0);
   disp('  setPlotCongruencySpectrum(-1,0)   <= the initialized default');
   setPlotCongruencySpectrum(-1,0);
   disp('  ');
   disp('successfully changed toggles 4 times');
   end
