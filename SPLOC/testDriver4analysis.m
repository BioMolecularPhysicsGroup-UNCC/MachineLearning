% test driver for analysis functions within the SPLOC toolset
% ------------------------------------------------------------------------
% SPLOC = Supervised Projective Learning with Orthogonal Completeness
%
% This test driver checks sploc functions related to analysis that uses
% either the discriminant or indifference selection basis vectors obtained
% by splocing.  
% 
% In addition to testing these functions, the purpose of this test driver
% is to serve as an example for how to use these sploc functions. 
%
% Toolset: I/O directory structure:
% 
% current directory --> sub-directories: input
%                                        splocLog
%                                        training
%                                        basisComparison
%                                        classification
%                                        analysis
%                 
% INPUT: (general description) 
% Many types of files can be read by a variety of sploc functions. Each
% such file must be formated according to specifications. In many cases, 
% the output files generated by some sploc functions will serve as input
% files for other sploc functions, which will usually have dependence. For
% example, under supervised training on various datastreams that are known
% to be functional or nonfunctional, a basis set of vectors is optimized
% to successfully classify an unknown datastream. At a later time, new
% data that comes in can be processed simply by reading in an input file
% that contains the relevant basis vectors for discrimination, without 
% redoing the training. Hence, the output from training becomes the input
% for classification along with more data. The read functions are designed
% to have flexibility so that no specific rules need to be followed.
% 
% verbosity: Specifies amount of intermediate processing steps to report.
%            Functions exist to output certain data, while verbosity has
%            no connection to that type of output and how it is reported.
%       ---> verbosity extracts hidden information within SPLOC functions.
%       ---> verbosity controls optional intermediate results ONLY:
% default: 0 => no output except what might get dumped into main log file.
% process: 1 => same as 0, writing key processing data in other log files.
% summary: 2 => same as 1, writing figures to files showing key relations.
% display: 3 => same as 2, with figures displayed on the screen, sometimes
%               with a pause, and/or with additional output printed to the
%               command window. Useful to understand how the code works!
%       ---> All printed figures have the same file type (fig, png, etc).
%       ---> Other log files are written in separate folders/directories.
% ------------------------------------------------------------------------
% 
% PROCESS: 
% SPLOC is comprised of many MATLAB functions that define the SPLOCtoolset
% See splocToolsetVersion() for detail comments about the SPLOC toolset.
%
% Each function that is tested here is listed in the menu.
%%                                                     start from sctratch
clc 
disp('  ');
disp(mfilename);
disp( dividerLine('apply new setup') );
iii = input('enter 1 to create new setup: ');
   if( iii == 1 )               % cleans out memory usage and starts fresh
   clear all
   iii = 1;
% ----------------------------- determine covariance or correlation matrix
   disp('  ');
   disp( dividerLine('select covariance or correlation matrix') );
   disp('1. use covariance  matrix')
   disp('2. use correlation matrix')
   iMtype = input('   Enter option: ');
      switch iMtype
        case 1
        mType = 'cov';
        cName = 'covariance';
        case 2
        mType = 'cor';
        cName = 'correlation';
        otherwise
        error('unknown option');
      end
   else
   iii = 0;
   end
close all
%%                                                     build function menu
test_dataStreamProjection = false;
test_dataStreamProjectionRMSF = false;
test_dataStreamFilter = false;
test_congruencyOverlaps = false;
test_traitProjection = false;
test_traitFilter = false;
test_showDynamics = false;

disp('  ');
disp( dividerLine('select function to test') );
disp('1. dataStreamProjection() --> clustering and time sequence plots')
disp('2. dataStreamProjection() --> dataStreamRMSF() --> variance spread')
disp('3. dataStreamFilter()     --> dataStreamRMSF() ')
disp('4. Congruency overlaps with PCA modes ');
disp('5. traitProjection()');
disp('6. traitFilter() --> reduceCmatrix()')
disp('7. showDynamics() --> movies')
disp('  ');
nMenu = input('   Enter option: ');
   switch nMenu
       case 1
       test_dataStreamProjection = true;
       case 2
       test_dataStreamProjectionRMSF = true;
       case 3
       test_dataStreamFilter = true;
       case 4
       test_congruencyOverlaps = true;
       case 5
       test_traitProjection = true;
       case 6
       test_traitFilter = true;
       case 7
       test_showDynamics = true;
       otherwise
       error('unknown option');
   end
prefix = ['opt',num2str(nMenu,'%02i'),'_'];
disp('  ');
disp( dividerLine(['setup = ',prefix]) );
%%                                                        initialize SPLOC
   if( iii == 1 )
   logFile = [prefix,mfilename];
   initializeSPLOC(1,'fName',logFile,'gType','png');
   mFormat = setDataMatrixFormat('xxx-yyy-zzz',2);  % by-pass screen input
% ---------------------------- read in grouped sets of A-matrix file names
   disp('   ');
   disp( dividerLine('reading unclassified groups: ELx,ETx,ESx,EFx') );
   [~,~,FnameA1ELx] = readFileNameList('group1ELx',0);
   [~,~,FnameA1ETx] = readFileNameList('group1ETx',0);
   [~,~,FnameA1ESx] = readFileNameList('group1ESx',0);
   [~,~,FnameA1EFx] = readFileNameList('group1EFx',0);
% ------------------------------------------------------------------------
   [~,~,FnameA2ELx] = readFileNameList('group2ELx',0);
   [~,~,FnameA2ETx] = readFileNameList('group2ETx',0);
   [~,~,FnameA2ESx] = readFileNameList('group2ESx',0);
   [~,~,FnameA2EFx] = readFileNameList('group2EFx',0);
% ------------------------------------------------------------------------
   disp( dividerLine('reading unclassified groups: FLx,FTx,FSx,FFx') );
   [~,~,FnameA1FLx] = readFileNameList('group1FLx',0);
   [~,~,FnameA1FTx] = readFileNameList('group1FTx',0);
   [~,~,FnameA1FSx] = readFileNameList('group1FSx',0);
   [~,~,FnameA1FFx] = readFileNameList('group1FFx',0);
% ------------------------------------------------------------------------
   [~,~,FnameA2FLx] = readFileNameList('group2FLx',0);
   [~,~,FnameA2FTx] = readFileNameList('group2FTx',0);
   [~,~,FnameA2FSx] = readFileNameList('group2FSx',0);
   [~,~,FnameA2FFx] = readFileNameList('group2FFx',0);
% ------------------------------------------------------- read A1-matrices
   disp( dividerLine('reading all A1-matrices') );
   [A1ELx,table1ELx] = readDataMatrices('A1ELx',FnameA1ELx,mFormat);
   [A1ETx,table1ETx] = readDataMatrices('A1ETx',FnameA1ETx,mFormat);
   [A1ESx,table1ESx] = readDataMatrices('A1ESx',FnameA1ESx,mFormat);
   [A1EFx,table1EFx] = readDataMatrices('A1EFx',FnameA1EFx,mFormat);
% ------------------------------------------------------------------------
   [A1FLx,table1FLx] = readDataMatrices('A1FLx',FnameA1FLx,mFormat);
   [A1FTx,table1FTx] = readDataMatrices('A1FTx',FnameA1FTx,mFormat);
   [A1FSx,table1FSx] = readDataMatrices('A1FSx',FnameA1FSx,mFormat);
   [A1FFx,table1FFx] = readDataMatrices('A1FFx',FnameA1FFx,mFormat); 
   disp('  ');
% ----------------------------------------------- report results on screen
   disp( dividerLine('results for A1Exx') );
   disp(table1ELx);
   disp(table1ETx);
   disp(table1ESx);
   disp(table1EFx);
   disp( dividerLine('results for A1Fxx') );
   disp(table1FLx);
   disp(table1FTx);
   disp(table1FSx);
   disp(table1FFx);
   disp(dividerLine);
   disp('   ');  
% ------------------------------------------------------- read A2-matrices
   disp( dividerLine('reading all A2-matrices') );
   [A2ELx,table2ELx] = readDataMatrices('A2ELx',FnameA2ELx,mFormat);
   [A2ETx,table2ETx] = readDataMatrices('A2ETx',FnameA2ETx,mFormat);
   [A2ESx,table2ESx] = readDataMatrices('A2ESx',FnameA2ESx,mFormat);
   [A2EFx,table2EFx] = readDataMatrices('A2EFx',FnameA2EFx,mFormat);
% ------------------------------------------------------------------------
   [A2FLx,table2FLx] = readDataMatrices('A2FLx',FnameA2FLx,mFormat);
   [A2FTx,table2FTx] = readDataMatrices('A2FTx',FnameA2FTx,mFormat);
   [A2FSx,table2FSx] = readDataMatrices('A2FSx',FnameA2FSx,mFormat);
   [A2FFx,table2FFx] = readDataMatrices('A2FFx',FnameA2FFx,mFormat); 
   disp('  ');
% ----------------------------------------------- report results on screen  
   disp( dividerLine('results for A2Exx') );
   disp(table2ELx);
   disp(table2ETx);
   disp(table2ESx);
   disp(table2EFx);
   disp( dividerLine('results for A2Fxx') );
   disp(table2FLx);
   disp(table2FTx);
   disp(table2FSx);
   disp(table2FFx);
   disp(dividerLine);
   disp('   ');
% ============================================= get traits from A-matrices
   disp( dividerLine('calculating traits') );
   ns = 500;           % => do not split the data: only 1 group per system
   trait1ELx = getMultivariateStats4sploc(A1ELx,ns,0,mType);
   trait1ETx = getMultivariateStats4sploc(A1ETx,ns,0,mType);
   trait1ESx = getMultivariateStats4sploc(A1ESx,ns,0,mType);
   trait1EFx = getMultivariateStats4sploc(A1EFx,ns,0,mType);
% ------------------------------------------------------------------------
   trait1FLx = getMultivariateStats4sploc(A1FLx,ns,0,mType);
   trait1FTx = getMultivariateStats4sploc(A1FTx,ns,0,mType);
   trait1FSx = getMultivariateStats4sploc(A1FSx,ns,0,mType);
   trait1FFx = getMultivariateStats4sploc(A1FFx,ns,0,mType);
% ------------------------------------------------------------------------
   ns = 20000;         % => do not split the data: only 1 group per system
   trait2ELx = getMultivariateStats4sploc(A2ELx,ns,0,mType);
   trait2ETx = getMultivariateStats4sploc(A2ETx,ns,0,mType);
   trait2ESx = getMultivariateStats4sploc(A2ESx,ns,0,mType);
   trait2EFx = getMultivariateStats4sploc(A2EFx,ns,0,mType);
% ------------------------------------------------------------------------
   trait2FLx = getMultivariateStats4sploc(A2FLx,ns,0,mType);
   trait2FTx = getMultivariateStats4sploc(A2FTx,ns,0,mType);
   trait2FSx = getMultivariateStats4sploc(A2FSx,ns,0,mType);
   trait2FFx = getMultivariateStats4sploc(A2FFx,ns,0,mType);  
   disp('   ');
   nV = trait2FLx.nVariables;    % all trait- data structures have same nV
% ============================================= get discriminant basis set
   fName1 = 'trainingSet1';
   fName2 = 'trainingSet1B';
% ------------------------------------------------------------------ sploc
   testFile1 = getOutputFileName('training',[fName1,'_splocResults.dlm']);
      if( isfile(testFile1) )
      disp(['SBV file = ',testFile1]);
      disp( dividerLine('reading discriminant basis set') );
      splocResults1 = readSPLOCresults(testFile1,1);
      Ud1 = getDiscriminantSBV(splocResults1);
      Ui1 = getIndifferenceSBV(splocResults1); 
      SBV1 = splocResults1.SBV;
      else
      disp('   ');
      disp( dividerLine(['building training set from ',fName1]) );    
% ------------------------------------------------------------------------
      [~,~,FnameAdata1F] = readFileNameList(fName1,0,'sType','F');
      [~,~,FnameAdata1N] = readFileNameList(fName1,0,'sType','N');
% ------------------------------------------------------------------------
      refName1F = [fName1,'_F'];          % make this a suitable file name
      [AmatrixInfo1F,table1F] = readDataMatrices(refName1F, ... 
                                                 FnameAdata1F,mFormat);
      disp('  ');
      disp(table1F);
      disp('   ');
% -----------------------------
      refName1N = [fName1,'_N'];          % make this a suitable file name
      [AmatrixInfo1N,table1N] = readDataMatrices(refName1N, ... 
                                                 FnameAdata1N,mFormat);
      disp('  ');
      disp(table1N);
      disp('  ');
% ------------------------------------------------------------------------
      ns = 125;  %=> split data into 4 groups per system
      trait1F4 = getMultivariateStats4sploc(AmatrixInfo1F,ns,0,mType);
      trait1N4 = getMultivariateStats4sploc(AmatrixInfo1N,ns,0,mType);
      disp('   ');
      disp( dividerLine('splocing') );     
      splocResults1 = sploc(0,0,fName1,trait1F4,trait1N4,1);
      %splocResults1 = sploc(0,0,fName1,trait1F4,trait1N4,0,0.7);
      Ud1 = getDiscriminantSBV(splocResults1);
      Ui1 = getIndifferenceSBV(splocResults1);
      SBV1 = splocResults1.SBV;
      end
% ============================================ work with large sample size
   testFile2 = getOutputFileName('training',[fName2,'_splocResults.dlm']);
      if( isfile(testFile2) )
      disp(['SBV file = ',testFile2]);
      disp( dividerLine('reading discriminant basis set') );
      splocResults2 = readSPLOCresults(testFile2,1);
      Ud2 = getDiscriminantSBV(splocResults2);
      Ui2 = getIndifferenceSBV(splocResults2); 
      SBV2 = splocResults2.SBV;
      else
      disp('   ');
      disp( dividerLine(['building training set from ',fName2]) );    
% ------------------------------------------------------------------------
      [~,~,FnameAdata2F] = readFileNameList(fName2,0,'sType','F');
      [~,~,FnameAdata2N] = readFileNameList(fName2,0,'sType','N');
% ------------------------------------------------------------------------
      refName2F = [fName2,'_F'];          % make this a suitable file name
      [AmatrixInfo2F,table2F] = readDataMatrices(refName2F, ... 
                                                 FnameAdata2F,mFormat);
      disp('  ');
      disp(table2F);
      disp('   ');
% -----------------------------
      refName2N = [fName2,'_N'];          % make this a suitable file name
      [AmatrixInfo2N,table2N] = readDataMatrices(refName2N, ... 
                                                 FnameAdata2N,mFormat);
      disp('  ');
      disp(table2N);
      disp('  ');
% ------------------------------------------------------------------------
      ns = 5000;  %=> split data into 4 groups per system
      trait2F4 = getMultivariateStats4sploc(AmatrixInfo2F,ns,0,mType);
      trait2N4 = getMultivariateStats4sploc(AmatrixInfo2N,ns,0,mType);
      disp('   ');
      disp( dividerLine('splocing') );   
      splocResults2 = sploc(0,0,fName2,trait2F4,trait2N4,1);
      %splocResults2 = sploc(0,0,fName2,trait2F4,trait2N4,0,0.7);
      Ud2 = getDiscriminantSBV(splocResults2);
      Ui2 = getIndifferenceSBV(splocResults2);
      SBV2 = splocResults2.SBV;
      end
% ------------------------------------------------------------ error check
   [~,dimUd1] = size(Ud1);
      if( dimUd1 == 0 )
      disp('Ud1 does not exist, fiddle with vT');
      end
   [~,dimUd2] = size(Ud2);
      if( dimUd2 == 0 )
      disp('Ud2 does not exist, fiddle with vT');
      end
      if( (dimUd1 == 0) || (dimUd2 == 0) )
      error('manually change script, by seting vT lower to get a SBV');
      end
% -------------------------------- get dimension of indifference subspaces
   [~,dimUi1] = size(Ui1);
   [~,dimUi2] = size(Ui2);
   end
%%                                           report dimension of subspaces
disp('   ');
disp(['                            dimension of vector space = ', ...
      num2str(nV)]);
disp( dividerLine('subspace dimensions') );
disp(['dimension of discriminant subspace from   500 samples = ', ...
      num2str(dimUd1)]);
disp(['dimension of discriminant subspace from 20000 samples = ', ...
      num2str(dimUd2)]);
disp('   ');
disp(['dimension of indifference subspace from   500 samples = ', ...
      num2str(dimUi1)]);
disp(['dimension of indifference subspace from 20000 samples = ', ...
      num2str(dimUi2)]);
   if( dimUd1 < 2 )
   error('dimUd1 < 2  --> change system so this is not the case'); 
   end
   if( dimUd2 < 2 )
   error('dimUd2 < 2  --> change system so this is not the case'); 
   end
      if( dimUi2 == 0 )
      error('Consider different input for which dimUi2 > 0');
      end
% ---------------------------------------------- apply dimension reduction
disp('   ');
disp('Showing only the top 5 modes or less in plots');
cut_dimUd1 = min(5,dimUd1);
cut_dimUi1 = min(5,dimUi1);
cut_dimUd2 = min(5,dimUd2);
cut_dimUi2 = min(5,dimUi2);
%%                    calculate PCA basis vectors and look at the extremes
   if( iii == 1 )
      disp('   ');
      disp(['Reading file: ',fName2]);
      msg = 'Pooling 20000-sample datasets {FFF,FFL,FLF,FLL} together'; 
      disp( dividerLine(msg) );
% ------------------------------------------------------------------------
      [~,~,FnameAdata2F] = readFileNameList(fName2,0,'sType','F');
      [~,~,FnameAdata2N] = readFileNameList(fName2,0,'sType','N');
% ------------------------------------------------------------------------
      refName2F = [fName2,'_F'];          % make this a suitable file name
      [AmatrixInfo2F,table2F] = readDataMatrices(refName2F, ... 
                                                 FnameAdata2F,mFormat);
      disp('  ');
      disp(table2F);
      disp('   ');
% -----------------------------
      refName2N = [fName2,'_N'];          % make this a suitable file name
      [AmatrixInfo2N,table2N] = readDataMatrices(refName2N, ... 
                                                 FnameAdata2N,mFormat);
      disp('  ');
      disp(table2N);
      disp('  ');
% ------------------------------------------------ pool nonfunctional data    
      A0 = [AmatrixInfo2N.A{1},AmatrixInfo2N.A{2}];
      nSamples0 = sum( AmatrixInfo2N.nSamples );
% --------------------------------------------------- pool functional data
      A1 = [AmatrixInfo2F.A{1},AmatrixInfo2F.A{2}];
      nSamples1 = sum( AmatrixInfo2F.nSamples );
% ------------------------------------------------ pool both kinds of data
      A2 = [AmatrixInfo2F.A{1},AmatrixInfo2F.A{2}, ...
           AmatrixInfo2N.A{1},AmatrixInfo2N.A{2}];
      nSamples2 = sum( AmatrixInfo2F.nSamples ) ...
                + sum( AmatrixInfo2N.nSamples );          
% ----------------------------------------------- record in data structure
      AmatrixInfoPCA0 = struct;
      AmatrixInfoPCA1 = struct;
      AmatrixInfoPCA2 = struct;
      
      AmatrixInfoPCA0.dataRefName = [fName2,'_N'];
      AmatrixInfoPCA1.dataRefName = [fName2,'_F'];
      AmatrixInfoPCA2.dataRefName = [fName2,'_FN'];
      
      AmatrixInfoPCA0.dataMatrixName= {AmatrixInfo2N.dataMatrixName{1},...
                                       AmatrixInfo2N.dataMatrixName{2}}; 
                                   
      AmatrixInfoPCA1.dataMatrixName= {AmatrixInfo2F.dataMatrixName{1},...
                                       AmatrixInfo2F.dataMatrixName{2}};
          
      AmatrixInfoPCA2.dataMatrixName= {AmatrixInfo2F.dataMatrixName{1},...
                                       AmatrixInfo2F.dataMatrixName{2},...
                                       AmatrixInfo2N.dataMatrixName{1},...
                                       AmatrixInfo2N.dataMatrixName{2}};
                               
      AmatrixInfoPCA0.nVariables = nV;
      AmatrixInfoPCA1.nVariables = nV;
      AmatrixInfoPCA2.nVariables = nV;
      
      AmatrixInfoPCA0.pType = AmatrixInfo2F.pType;
      AmatrixInfoPCA1.pType = AmatrixInfo2F.pType;
      AmatrixInfoPCA2.pType = AmatrixInfo2F.pType;
      
      AmatrixInfoPCA0.dim = AmatrixInfo2F.dim;
      AmatrixInfoPCA1.dim = AmatrixInfo2F.dim;
      AmatrixInfoPCA2.dim = AmatrixInfo2F.dim;
      
      AmatrixInfoPCA0.n = 1;
      AmatrixInfoPCA1.n = 1;
      AmatrixInfoPCA2.n = 1;
      
      AmatrixInfoPCA0.A = cell(1);
      AmatrixInfoPCA1.A = cell(1);
      AmatrixInfoPCA2.A = cell(1);
      
      AmatrixInfoPCA0.A{1} = A0;
      AmatrixInfoPCA1.A{1} = A1;
      AmatrixInfoPCA2.A{1} = A2;
      
      AmatrixInfoPCA0.nSamples = nSamples0;  
      AmatrixInfoPCA1.nSamples = nSamples1;
      AmatrixInfoPCA2.nSamples = nSamples2;
% --------------------------------------------------------- build Q from A
      [~,ns] = size(A0);
      traitPCA0 = getMultivariateStats4sploc(AmatrixInfoPCA0,ns,0,mType);
      [~,ns] = size(A1);
      traitPCA1 = getMultivariateStats4sploc(AmatrixInfoPCA1,ns,0,mType);
      [~,ns] = size(A2);
      traitPCA2 = getMultivariateStats4sploc(AmatrixInfoPCA2,ns,0,mType);
      disp('   ');  
      disp( dividerLine('Appling PCA to pooled datasets') );
% ---------------------------------------------------------- diagonalize Q
      Q0 = traitPCA0.cM{1};
      [PCA0t,VAR0] = eig(Q0);
      VAR0 = diag(VAR0)';
      [variancePCA0,indx] = sort(VAR0,'descend');
      PCA0t = PCA0t(:,indx);
      PCA0d = PCA0t(:,1:dimUd2);
      PCA0i = PCA0t(:,nV-dimUi2+1:nV);
% --------------------------------------------------
      Q1 = traitPCA1.cM{1};
      [PCA1t,VAR1] = eig(Q1);
      VAR1 = diag(VAR1)';
      [variancePCA1,indx] = sort(VAR1,'descend');
      PCA1t = PCA1t(:,indx);
      PCA1d = PCA1t(:,1:dimUd2);
      PCA1i = PCA1t(:,nV-dimUi2+1:nV);
% --------------------------------------------------
      Q2 = traitPCA2.cM{1};
      [PCA2t,VAR2] = eig(Q2);
      VAR2 = diag(VAR2)';
      [variancePCA2,indx] = sort(VAR2,'descend');
      PCA2t = PCA2t(:,indx);
      PCA2d = PCA2t(:,1:dimUd2);
      PCA2i = PCA2t(:,nV-dimUi2+1:nV);
   end
%%                                                     make color priority
cDark = cell(1,10);
cLite = cell(1,10);
cDark{1} = [0.0,0.0,0.0];      % black
cDark{2} = [0.0,0.0,0.8];      % dark blue
cDark{3} = [0.0,0.6,0.0];      % dark green
cDark{4} = [0.6,0.6,0.6];      % dark gray
cDark{5} = [0.3,0.3,0.8];      % blue
cDark{6} = [0.2,0.8,0.2];      % green
cDark{7} = [0.0,0.8,0.8];      % dark cyan
cDark{8} = [0.7,0.7,1.0];      % light blue
cDark{9} = [0.3,1.0,0.3];      % light green
cDark{10}= [0.2,1.0,1.0];      % light cyan
% --------------------------------------------------
cLite{1} = [0.8,0.0,0.8];      % dark magenta
cLite{2} = [0.8,0.8,0.0];      % dark yellow
cLite{3} = [0.8,0.0,0.0];      % dark red
cLite{4} = [0.9,0.9,0.9];      % almost white
cLite{5} = [0.9,0.1,0.9];      % magenta
cLite{6} = [1.0,1.0,0.0];      % yellow
cLite{7} = [1.0,0.0,0.0];      % red
cLite{8} = [1.0,1.0,0.5];      % light yellow
cLite{9} = [1.0,0.5,1.0];      % light magenta
cLite{10}= [1.0,0.6,0.6];      % light red
% --------------------------------------------------------- size variation
Rsize = 75:-5:30; 
trans = 0.7:-0.05:0.25;
%%                                             test dataStreamProjection()
   if( test_dataStreamProjection )
%%                                                 work with PCAd subspace
   disp('  ');
   disp( dividerLine('select PCA modes') );
   disp('1. pooled nonfunctional covariance matrix');
   disp('2. pooled functional covariance matrix');
   disp('3. pooled nonfunctional and functional covariance matrix');
   disp(dividerLine);
   disp('  ');
   ipca = input('enter option: ');
      switch ipca
      case 1
      PCAt = PCA0t;
      PCAd = PCA0d;
      PCAi = PCA0i;
      case 2
      PCAt = PCA1t;
      PCAd = PCA1d;
      PCAi = PCA1i;
      case 3
      PCAt = PCA2t;
      PCAd = PCA2d;
      PCAi = PCA2i;
      otherwise
      error('option not available');
      end
%%                                        calculate projections using PCAd 
   disp('  ');
   disp(['PCAd = the top m PCA-modes where m = # of ', ...
         'discriminant modes in Ud2']); 
   disp('showing 5 or less cases');
   disp(['m = ',num2str(cut_dimUd2)]);
   disp( dividerLine('Projecting into PCAd subspace') );
   A2ELxPCAd = dataStreamProjection('A2ELxPCAd',A2ELx,PCAd);
   A2EFxPCAd = dataStreamProjection('A2EFxPCAd',A2EFx,PCAd);
%%                                               plot time sequence graphs
   for j=1:cut_dimUd2
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A2EFxPCAd.n
      tstart = tend + 1;
      tend = tend + A2EFxPCAd.nSamples(k); 
      t = tstart:tend;
      q = A2EFxPCAd.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A2ELxPCAd.n
      tstart = tend + 1;
      tend = tend + A2ELxPCAd.nSamples(k); 
      t = tstart:tend;
      q = A2ELxPCAd.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('20000 samples for ELx and EFx');
   legend('EFF','EFL','EFT','ELF','ELL','ELT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUd2
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A2ELx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A2ELxPCAd.n
        q1 = A2ELxPCAd.A{k}(j1,:);
        q2 = A2ELxPCAd.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for ELx');
     legend('ELF','ELL','ELT','Location','best');
% --------------------------------------------------------- figure 2 A2EFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A2EFxPCAd.n
        q1 = A2EFxPCAd.A{k}(j1,:);
        q2 = A2EFxPCAd.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for EFx');
     legend('EFF','EFL','EFT','Location','best');   
% ----------------------------------------------- figure 3 A2ELx and A2EFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for ELx-combined compared to EFx-combined');
     legend('EFx','ELx','Location','best'); 
     pause
     end 
%%                                                repeat using FLx and FFx
   close all
   A2FLxPCAd = dataStreamProjection('A2FLxPCAd',A2FLx,PCAd);
   A2FFxPCAd = dataStreamProjection('A2FFxPCAd',A2FFx,PCAd);
%%                                               plot time sequence graphs
   for j=1:cut_dimUd2
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A2FFxPCAd.n
      tstart = tend + 1;
      tend = tend + A2FFxPCAd.nSamples(k); 
      t = tstart:tend;
      q = A2FFxPCAd.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A2FLxPCAd.n
      tstart = tend + 1;
      tend = tend + A2FLxPCAd.nSamples(k); 
      t = tstart:tend;
      q = A2FLxPCAd.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('20000 samples for FLx and FFx');
   legend('FFF','FFL','FFT','FLF','FLL','FLT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUd2
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A2FLx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A2FLxPCAd.n
        q1 = A2FLxPCAd.A{k}(j1,:);
        q2 = A2FLxPCAd.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FLx');
     legend('FLF','FLL','FLT','Location','best');
% --------------------------------------------------------- figure 2 A2FFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A2FFxPCAd.n
        q1 = A2FFxPCAd.A{k}(j1,:);
        q2 = A2FFxPCAd.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FFx');
     legend('FFF','FFL','FFT','Location','best');   
% ----------------------------------------------- figure 3 A2FLx and A2FFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FLx-combined compared to FFx-combined');
     legend('FFx','FLx','Location','best'); 
     pause
     end      
%%                                     work with Ud1 discriminant subspace
   disp('  ');
   disp( dividerLine('Projecting into discriminant subspace') );
   A1ELxUd1 = dataStreamProjection('A1ELxUd',A1ELx,Ud1);
   A1EFxUd1 = dataStreamProjection('A1EFxUd',A1EFx,Ud1);
   close all
%%                                               plot time sequence graphs
   for j=1:cut_dimUd1
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A1EFxUd1.n
      tstart = tend + 1;
      tend = tend + A1EFxUd1.nSamples(k); 
      t = tstart:tend;
      q = A1EFxUd1.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A1ELxUd1.n
      tstart = tend + 1;
      tend = tend + A1ELxUd1.nSamples(k); 
      t = tstart:tend;
      q = A1ELxUd1.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('500 samples for ELx and EFx');
   legend('EFF','EFL','EFT','ELF','ELL','ELT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUd1
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A1ELx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A1ELxUd1.n
        q1 = A1ELxUd1.A{k}(j1,:);
        q2 = A1ELxUd1.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('500 samples for ELx');
     legend('ELF','ELL','ELT','Location','best');
% --------------------------------------------------------- figure 2 A1EFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A1EFxUd1.n
        q1 = A1EFxUd1.A{k}(j1,:);
        q2 = A1EFxUd1.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('500 samples for EFx');
     legend('EFF','EFL','EFT','Location','best');   
% ----------------------------------------------- figure 3 A1ELx and A1EFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('500 samples for ELx-combined compared to EFx-combined');
     legend('EFx','ELx','Location','best'); 
     pause
     end 
%%                                                repeat using FLx and FFx
   close all
   A1FLxUd1 = dataStreamProjection('A1FLxUd',A1FLx,Ud1);
   A1FFxUd1 = dataStreamProjection('A1FFxUd',A1FFx,Ud1);
%%                                               plot time sequence graphs
   for j=1:cut_dimUd1
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A1FFxUd1.n
      tstart = tend + 1;
      tend = tend + A1FFxUd1.nSamples(k); 
      t = tstart:tend;
      q = A1FFxUd1.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A1FLxUd1.n
      tstart = tend + 1;
      tend = tend + A1FLxUd1.nSamples(k); 
      t = tstart:tend;
      q = A1FLxUd1.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('500 samples for FLx and FFx');
   legend('FFF','FFL','FFT','FLF','FLL','FLT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUd1
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A1FLx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A1FLxUd1.n
        q1 = A1FLxUd1.A{k}(j1,:);
        q2 = A1FLxUd1.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('500 samples for FLx');
     legend('FLF','FLL','FLT','Location','best');
% --------------------------------------------------------- figure 2 A1FFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A1FFxUd1.n
        q1 = A1FFxUd1.A{k}(j1,:);
        q2 = A1FFxUd1.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('500 samples for FFx');
     legend('FFF','FFL','FFT','Location','best');   
% ----------------------------------------------- figure 3 A1FLx and A1FFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('500 samples for FLx-combined compared to FFx-combined');
     legend('FFx','FLx','Location','best'); 
     pause
     end   
%%                   repeat comparisons between A2ELx, A2EFx, A2FLx, A2FFx
   A2ELxUd2 = dataStreamProjection('A2ELxUd',A2ELx,Ud2);
   A2EFxUd2 = dataStreamProjection('A2EFxUd',A2EFx,Ud2);
%%                                               plot time sequence graphs
   for j=1:cut_dimUd2
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A2EFxUd2.n
      tstart = tend + 1;
      tend = tend + A2EFxUd2.nSamples(k); 
      t = tstart:tend;
      q = A2EFxUd2.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A2ELxUd2.n
      tstart = tend + 1;
      tend = tend + A2ELxUd2.nSamples(k); 
      t = tstart:tend;
      q = A2ELxUd2.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('20000 samples for ELx and EFx');
   legend('EFF','EFL','EFT','ELF','ELL','ELT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUd2
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A2ELx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A2ELxUd2.n
        q1 = A2ELxUd2.A{k}(j1,:);
        q2 = A2ELxUd2.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for ELx');
     legend('ELF','ELL','ELT','Location','best');
% --------------------------------------------------------- figure 2 A2EFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A2EFxUd2.n
        q1 = A2EFxUd2.A{k}(j1,:);
        q2 = A2EFxUd2.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for EFx');
     legend('EFF','EFL','EFT','Location','best');   
% ----------------------------------------------- figure 3 A2ELx and A2EFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for ELx-combined compared to EFx-combined');
     legend('EFx','ELx','Location','best'); 
     pause
     end 
%%                                                repeat using FLx and FFx
   close all
   A2FLxUd2 = dataStreamProjection('A2FLxUd',A2FLx,Ud2);
   A2FFxUd2 = dataStreamProjection('A2FFxUd',A2FFx,Ud2);
%%                                               plot time sequence graphs
   for j=1:cut_dimUd2
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A2FFxUd2.n
      tstart = tend + 1;
      tend = tend + A2FFxUd2.nSamples(k); 
      t = tstart:tend;
      q = A2FFxUd2.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A2FLxUd2.n
      tstart = tend + 1;
      tend = tend + A2FLxUd2.nSamples(k); 
      t = tstart:tend;
      q = A2FLxUd2.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('20000 samples for FLx and FFx');
   legend('FFF','FFL','FFT','FLF','FLL','FLT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUd2
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A2FLx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A2FLxUd2.n
        q1 = A2FLxUd2.A{k}(j1,:);
        q2 = A2FLxUd2.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FLx');
     legend('FLF','FLL','FLT','Location','best');
% --------------------------------------------------------- figure 2 A2FFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A2FFxUd2.n
        q1 = A2FFxUd2.A{k}(j1,:);
        q2 = A2FFxUd2.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FFx');
     legend('FFF','FFL','FFT','Location','best');   
% ----------------------------------------------- figure 3 A2FLx and A2FFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FLx-combined compared to FFx-combined');
     legend('FFx','FLx','Location','best'); 
     pause
     end 
%%                                                 on A2 plot all 24 cases
   A2ETxUd2 = dataStreamProjection('A2ETxUd',A2ETx,Ud2);
   A2ESxUd2 = dataStreamProjection('A2ESxUd',A2ESx,Ud2);
   A2FTxUd2 = dataStreamProjection('A2FTxUd',A2FTx,Ud2);
   A2FSxUd2 = dataStreamProjection('A2FSxUd',A2FSx,Ud2);
%%                                all 24 cases making fuzzball comparisons
   close all
   h = cell(1,3);
     for j2=2:cut_dimUd2
     j1 = j2 - 1;
     figure(1);
     clf
     hold on;
% ======================================================== xFx cases first
     k = 5;
        for i=1:A2EFxUd2.n
        q1 = A2EFxUd2.A{i}(j1,:);
        q2 = A2EFxUd2.A{i}(j2,:);
        scatter(q1,q2,75,'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        end      
     k = 7; 
        for i=1:A2FFxUd2.n
        q1 = A2FFxUd2.A{i}(j1,:);
        q2 = A2FFxUd2.A{i}(j2,:);
        scatter(q1,q2,75,'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        end 
% =============================================== xLx, xTx, xSx cases next
     k = 1;
        for i=1:A2ELxUd2.n
        q1 = A2ELxUd2.A{i}(j1,:);
        q2 = A2ELxUd2.A{i}(j2,:);
        h{i} = scatter(q1,q2,25,'filled','MarkerFaceColor', ...
                       cDark{k},'MarkerFaceAlpha',trans(k) );
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples A2ELx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 2;
        for i=1:A2ETxUd2.n
        delete( h{i} );
        q1 = A2ETxUd2.A{i}(j1,:);
        q2 = A2ETxUd2.A{i}(j2,:);
        h{i} = scatter(q1,q2,25,'filled','MarkerFaceColor', ... 
                       cDark{k},'MarkerFaceAlpha',trans(k) );
        end
     title('20000 samples A2ETx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 3;
        for i=1:A2ESxUd2.n
        delete( h{i} );
        q1 = A2ESxUd2.A{i}(j1,:);
        q2 = A2ESxUd2.A{i}(j2,:);
        h{i} = scatter(q1,q2,25,'filled','MarkerFaceColor', ... 
                       cDark{k},'MarkerFaceAlpha',trans(k) );
        end
     title('20000 samples A2ESx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 4;
        for i=1:A2FLxUd2.n
        delete( h{i} );
        q1 = A2FLxUd2.A{i}(j1,:);
        q2 = A2FLxUd2.A{i}(j2,:);
        h{i} = scatter(q1,q2,25,'filled','MarkerFaceColor', ... 
                       cDark{k},'MarkerFaceAlpha',trans(k) );
        end 
     title('20000 samples A2FLx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 5;
        for i=1:A2FTxUd2.n
        delete( h{i} );
        q1 = A2FTxUd2.A{i}(j1,:);
        q2 = A2FTxUd2.A{i}(j2,:);
        h{i} = scatter(q1,q2,25,'filled','MarkerFaceColor', ... 
                       cDark{k},'MarkerFaceAlpha',trans(k) );
        end  
     title('20000 samples A2FTx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 6;
        for i=1:A2FSxUd2.n
        delete( h{i} );
        q1 = A2FSxUd2.A{i}(j1,:);
        q2 = A2FSxUd2.A{i}(j2,:);
        scatter(q1,q2,25,'filled','MarkerFaceColor',cDark{k}, ... 
                          'MarkerFaceAlpha',trans(k) );
        end
     title('20000 samples A2FSx versus A2yFx');
     pause
     end 
%%                                       all 24 fuzzball comparisons in 3D
%{
%  Not very useful
   close all
   h = cell(1,3);
     if( dimUd2 > 2 )
     figure(1);
     clf
% ======================================================== xFx cases first
     k = 5;
        for i=1:A2EFxUd2.n
        q1 = A2EFxUd2.A{i}(1,:);
        q2 = A2EFxUd2.A{i}(2,:);
        q3 = A2EFxUd2.A{i}(3,:);
        scatter3(q1,q2,q3,50,'filled','MarkerFaceColor',cLite{k}, ... 
                                      'MarkerFaceAlpha',0.05);
        hold on;
        end 
     k = 7; 
        for i=1:A2FFxUd2.n
        q1 = A2FFxUd2.A{i}(1,:);
        q2 = A2FFxUd2.A{i}(2,:);
        q3 = A2FFxUd2.A{i}(3,:);
        scatter3(q1,q2,q3,75,'filled','MarkerFaceColor',cLite{k}, ... 
                                      'MarkerFaceAlpha',0.1);
        end 
% =============================================== xLx, xTx, xSx cases next
     k = 1;
        for i=1:A2ELxUd2.n
        q1 = A2ELxUd2.A{i}(1,:);
        q2 = A2ELxUd2.A{i}(2,:);
        q3 = A2ELxUd2.A{i}(3,:);
        h{i} = scatter3(q1,q2,q3,25,'filled','MarkerFaceColor',cDark{k});                    
        end
     xlabel('q1');
     ylabel('q2');
     zlabel('q3');
     title('20000 samples A2ELx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 2;
        for i=1:A2ETxUd2.n
        delete( h{i} );
        q1 = A2ETxUd2.A{i}(1,:);
        q2 = A2ETxUd2.A{i}(2,:);
        q3 = A2ETxUd2.A{i}(3,:);
        h{i} = scatter3(q1,q2,q3,25,'filled','MarkerFaceColor',cDark{k});
        end
     title('20000 samples A2ETx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 3;
        for i=1:A2ESxUd2.n
        delete( h{i} );
        q1 = A2ESxUd2.A{i}(1,:);
        q2 = A2ESxUd2.A{i}(2,:);
        q3 = A2ESxUd2.A{i}(3,:);
        h{i} = scatter3(q1,q2,q3,25,'filled','MarkerFaceColor',cDark{k});
        end
     title('20000 samples A2ESx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 4;
        for i=1:A2FLxUd2.n
        delete( h{i} );
        q1 = A2FLxUd2.A{i}(1,:);
        q2 = A2FLxUd2.A{i}(2,:);
        q3 = A2FLxUd2.A{i}(3,:);
        h{i} = scatter3(q1,q2,q3,25,'filled','MarkerFaceColor',cDark{k});
        end 
     title('20000 samples A2FLx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 5;
        for i=1:A2FTxUd2.n
        delete( h{i} );
        q1 = A2FTxUd2.A{i}(1,:);
        q2 = A2FTxUd2.A{i}(2,:);
        q3 = A2FTxUd2.A{i}(3,:);
        h{i} = scatter3(q1,q2,q3,25,'filled','MarkerFaceColor',cDark{k});
        end  
     title('20000 samples A2FTx versus A2yFx');
     pause;
% ------------------------------------------------------------------------
     k = 6;
        for i=1:A2FSxUd2.n
        delete( h{i} );
        q1 = A2FSxUd2.A{i}(1,:);
        q2 = A2FSxUd2.A{i}(2,:);
        q3 = A2FSxUd2.A{i}(3,:);
        scatter3(q1,q2,q3,25,'filled','MarkerFaceColor',cDark{k});
        end
     title('20000 samples A2FSx versus A2yFx');
     pause 
     end
%}
%%                                                 work with PCAi subspace
   disp('  ');
   disp(['PCAi = the bottom m PCA-modes where m = # of ', ...
         'indifferent modes in Ui2']); 
   disp('showing 5 or less cases');
   disp(['m = ',num2str(cut_dimUi2)]);
   disp( dividerLine('Projecting into PCAi subspace') );
% ------------------------------------- compare A2ELx, A2EFx, A2FLx, A2FFx
   A2ELxPCAi = dataStreamProjection('A2ELxPCAi',A2ELx,PCAi);
   A2EFxPCAi = dataStreamProjection('A2EFxPCAi',A2EFx,PCAi);
%%                                               plot time sequence graphs
   for j=1:cut_dimUi2
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A2EFxPCAi.n
      tstart = tend + 1;
      tend = tend + A2EFxPCAi.nSamples(k); 
      t = tstart:tend;
      q = A2EFxPCAi.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A2ELxPCAi.n
      tstart = tend + 1;
      tend = tend + A2ELxPCAi.nSamples(k); 
      t = tstart:tend;
      q = A2ELxPCAi.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('20000 samples for ELx and EFx');
   legend('EFF','EFL','EFT','ELF','ELL','ELT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUi2
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A2ELx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A2ELxPCAi.n
        q1 = A2ELxPCAi.A{k}(j1,:);
        q2 = A2ELxPCAi.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for ELx');
     legend('ELF','ELL','ELT','Location','best');
% --------------------------------------------------------- figure 2 A2EFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A2EFxPCAi.n
        q1 = A2EFxPCAi.A{k}(j1,:);
        q2 = A2EFxPCAi.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for EFx');
     legend('EFF','EFL','EFT','Location','best');   
% ----------------------------------------------- figure 3 A2ELx and A2EFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for ELx-combined compared to EFx-combined');
     legend('EFx','ELx','Location','best'); 
     pause
     end 
%%                                                repeat using FLx and FFx
   close all
   A2FLxPCAi = dataStreamProjection('A2FLxPCAi',A2FLx,PCAi);
   A2FFxPCAi = dataStreamProjection('A2FFxPCAi',A2FFx,PCAi);
%%                                               plot time sequence graphs
   for j=1:cut_dimUi2
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A2FFxPCAi.n
      tstart = tend + 1;
      tend = tend + A2FFxPCAi.nSamples(k); 
      t = tstart:tend;
      q = A2FFxPCAi.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A2FLxPCAi.n
      tstart = tend + 1;
      tend = tend + A2FLxPCAi.nSamples(k); 
      t = tstart:tend;
      q = A2FLxPCAi.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('20000 samples for FLx and FFx');
   legend('FFF','FFL','FFT','FLF','FLL','FLT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUi2
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A2FLx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A2FLxPCAi.n
        q1 = A2FLxPCAi.A{k}(j1,:);
        q2 = A2FLxPCAi.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FLx');
     legend('FLF','FLL','FLT','Location','best');
% --------------------------------------------------------- figure 2 A2FFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A2FFxPCAi.n
        q1 = A2FFxPCAi.A{k}(j1,:);
        q2 = A2FFxPCAi.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FFx');
     legend('FFF','FFL','FFT','Location','best');   
% ----------------------------------------------- figure 3 A2FLx and A2FFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FLx-combined compared to FFx-combined');
     legend('FFx','FLx','Location','best'); 
     pause
     end        
%%                                                      conserved subspace
   disp('  ');
   disp( dividerLine('Projecting into indifference subspace') );   
% ------------------------------------- compare A2ELx, A2EFx, A2FLx, A2FFx
   A2ELxUi2 = dataStreamProjection('A2ELxUd',A2ELx,Ui2);
   A2EFxUi2 = dataStreamProjection('A2EFxUd',A2EFx,Ui2);
   close all
%%                                               plot time sequence graphs
   for j=1:cut_dimUi2
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A2EFxUi2.n
      tstart = tend + 1;
      tend = tend + A2EFxUi2.nSamples(k); 
      t = tstart:tend;
      q = A2EFxUi2.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A2ELxUi2.n
      tstart = tend + 1;
      tend = tend + A2ELxUi2.nSamples(k); 
      t = tstart:tend;
      q = A2ELxUi2.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('20000 samples for ELx and EFx');
   legend('EFF','EFL','EFT','ELF','ELL','ELT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUi2
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A2ELx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A2ELxUi2.n
        q1 = A2ELxUi2.A{k}(j1,:);
        q2 = A2ELxUi2.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for ELx');
     legend('ELF','ELL','ELT','Location','best');
% --------------------------------------------------------- figure 2 A2EFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A2EFxUi2.n
        q1 = A2EFxUi2.A{k}(j1,:);
        q2 = A2EFxUi2.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for EFx');
     legend('EFF','EFL','EFT','Location','best');   
% ----------------------------------------------- figure 3 A2ELx and A2EFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for ELx-combined compared to EFx-combined');
     legend('EFx','ELx','Location','best'); 
     pause
     end 
%%                                                repeat using FLx and FFx
   close all
   A2FLxUi2 = dataStreamProjection('A2FLxUd',A2FLx,Ui2);
   A2FFxUi2 = dataStreamProjection('A2FFxUd',A2FFx,Ui2);
%%                                               plot time sequence graphs
   for j=1:cut_dimUi2
   figure(1);
   clf;
   hold on;
   tend = 0; 
      for k=1:A2FFxUi2.n
      tstart = tend + 1;
      tend = tend + A2FFxUi2.nSamples(k); 
      t = tstart:tend;
      q = A2FFxUi2.A{k}(j,:);
      plot(t,q,'color',cLite{k});
      end
% --------------------------------------------
   tend = 0;
      for k=1:A2FLxUi2.n
      tstart = tend + 1;
      tend = tend + A2FLxUi2.nSamples(k); 
      t = tstart:tend;
      q = A2FLxUi2.A{k}(j,:);
      plot(t,q,'color',cDark{k});
      end
   xlabel('time (shifted)');
   ylabel( ['q',num2str(j)] );
   title('20000 samples for FLx and FFx');
   legend('FFF','FFL','FFT','FLF','FLL','FLT','Location','best');
   pause
   end
%%                                                          plot fuzzballs
   close all
     for j2=2:cut_dimUi2
     j1 = j2 - 1;
% --------------------------------------------------------- figure 1 A2FLx
     figure(1);
     clf
     hold on;
     qL1 = [];
     qL2 = [];
        for k=1:A2FLxUi2.n
        q1 = A2FLxUi2.A{k}(j1,:);
        q2 = A2FLxUi2.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cDark{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qL1 = horzcat(qL1,q1);
        qL2 = horzcat(qL2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FLx');
     legend('FLF','FLL','FLT','Location','best');
% --------------------------------------------------------- figure 2 A2FFx
     figure(2);
     clf
     hold on;
     qF1 = [];
     qF2 = [];
        for k=1:A2FFxUi2.n
        q1 = A2FFxUi2.A{k}(j1,:);
        q2 = A2FFxUi2.A{k}(j2,:);
        scatter(q1,q2,Rsize(k),'filled','MarkerFaceColor',cLite{k}, ... 
                                        'MarkerFaceAlpha',trans(k) );
        qF1 = horzcat(qF1,q1);
        qF2 = horzcat(qF2,q2);
        end
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FFx');
     legend('FFF','FFL','FFT','Location','best');   
% ----------------------------------------------- figure 3 A2FLx and A2FFx
     figure(3);
     clf
     hold on;
     k = 7;                                                 % => light red
     scatter(qF1,qF2,60,'filled','MarkerFaceColor',cLite{k});
     k = 2;                                                 % => dark blue 
     scatter(qL1,qL2,25,'filled','MarkerFaceColor',cDark{k});
     xlabel( ['q',num2str(j1)] );
     ylabel( ['q',num2str(j2)] );
     title('20000 samples for FLx-combined compared to FFx-combined');
     legend('FFx','FLx','Location','best'); 
     pause
     end   
   end
%%                        test dataStreamProjection() and dataStreamRMSF()
   if( test_dataStreamProjectionRMSF )
   close all
%%                                            view RMSF on selection modes
%  REMARK: Here, the same variable names and same fname labels are used as
%          that used in the filter case. Except here, we are considering 
%          projections. Since these data-structure names are the same, we
%          will loose any filtered information, which is irrelevant here.
   disp('  ');
   disp( dividerLine('calculating RMSF on selection modes') );
   A2ELxUd2 = dataStreamProjection('A2ELxUd2',A2ELx,Ud2);
   A2ETxUd2 = dataStreamProjection('A2ETxUd2',A2ETx,Ud2);
   A2ESxUd2 = dataStreamProjection('A2ESxUd2',A2ESx,Ud2);
   A2EFxUd2 = dataStreamProjection('A2EFxUd2',A2EFx,Ud2);
   A2FLxUd2 = dataStreamProjection('A2FLxUd2',A2FLx,Ud2);
   A2FTxUd2 = dataStreamProjection('A2FTxUd2',A2FTx,Ud2);
   A2FSxUd2 = dataStreamProjection('A2FSxUd2',A2FSx,Ud2);
   A2FFxUd2 = dataStreamProjection('A2FFxUd2',A2FFx,Ud2);
% ----------------------------------------------------- Ud2-projected RMSF
   RMSF2ELxUd2 = dataStreamRMSF(A2ELxUd2);
   RMSF2ETxUd2 = dataStreamRMSF(A2ETxUd2);
   RMSF2ESxUd2 = dataStreamRMSF(A2ESxUd2);
   RMSF2EFxUd2 = dataStreamRMSF(A2EFxUd2);
% -----------------------------------------
   RMSF2FLxUd2 = dataStreamRMSF(A2FLxUd2);
   RMSF2FTxUd2 = dataStreamRMSF(A2FTxUd2);
   RMSF2FSxUd2 = dataStreamRMSF(A2FSxUd2);
   RMSF2FFxUd2 = dataStreamRMSF(A2FFxUd2);
% ------------------------------------------------ plot Ud2-projected RMSF
   figure(1);
   clf
   hold on
   dModes = 1:dimUd2;
      for k=1:3
      rmsf = RMSF2ELxUd2.rmsf{k};
      h1 = plot(dModes,rmsf,'Linewidth',1.4,'color',cDark{1});
      rmsf = RMSF2ETxUd2.rmsf{k};
      h2 = plot(dModes,rmsf,'Linewidth',1.4,'color',cDark{2});
      rmsf = RMSF2ESxUd2.rmsf{k};
      h3 = plot(dModes,rmsf,'Linewidth',1.4,'color',cDark{3});
      rmsf = RMSF2EFxUd2.rmsf{k};
      h4 = plot(dModes,rmsf,'Linewidth',1.9,'color',cLite{1});
      rmsf = RMSF2FLxUd2.rmsf{k};
      h5 = plot(dModes,rmsf,'Linewidth',1.4,'color',cDark{4}); 
      rmsf = RMSF2FTxUd2.rmsf{k};
      h6 = plot(dModes,rmsf,'Linewidth',1.4,'color',cDark{5});
      rmsf = RMSF2FSxUd2.rmsf{k};
      h7 = plot(dModes,rmsf,'Linewidth',1.4,'color',cDark{6});
      rmsf = RMSF2FFxUd2.rmsf{k};
      h8 = plot(dModes,rmsf,'Linewidth',1.9,'color',cLite{2}); 
      end
   title('20000 samples per system');
   xlabel('discriminant selection basis vector number');
   ylabel('Ud2-projected RMSF');
   legend([h1,h2,h3,h4,h5,h6,h7,h8], ... 
          {'ELx','ETx','ESx','EFx','FLx','FTx','FSx','FFx'}, ...
          'location','best');
% --------------------------------------------------------
   A2ELxUi2 = dataStreamProjection('A2ELxUi2',A2ELx,Ui2);
   A2ETxUi2 = dataStreamProjection('A2ETxUi2',A2ETx,Ui2);
   A2ESxUi2 = dataStreamProjection('A2ESxUi2',A2ESx,Ui2);
   A2EFxUi2 = dataStreamProjection('A2EFxUi2',A2EFx,Ui2);
   A2FLxUi2 = dataStreamProjection('A2FLxUi2',A2FLx,Ui2);
   A2FTxUi2 = dataStreamProjection('A2FTxUi2',A2FTx,Ui2);
   A2FSxUi2 = dataStreamProjection('A2FSxUi2',A2FSx,Ui2);
   A2FFxUi2 = dataStreamProjection('A2FFxUi2',A2FFx,Ui2);
% ----------------------------------------------------- Ui2-projected RMSF
   RMSF2ELxUi2 = dataStreamRMSF(A2ELxUi2);
   RMSF2ETxUi2 = dataStreamRMSF(A2ETxUi2);
   RMSF2ESxUi2 = dataStreamRMSF(A2ESxUi2);
   RMSF2EFxUi2 = dataStreamRMSF(A2EFxUi2);
% -----------------------------------------
   RMSF2FLxUi2 = dataStreamRMSF(A2FLxUi2);
   RMSF2FTxUi2 = dataStreamRMSF(A2FTxUi2);
   RMSF2FSxUi2 = dataStreamRMSF(A2FSxUi2);
   RMSF2FFxUi2 = dataStreamRMSF(A2FFxUi2);
% ------------------------------------------------ plot Ui2-projected RMSF
   figure(2);
   clf
   hold on
   iModes = 1:dimUi2;
   [d,a] = size(Ui2);
   iModes = iModes + (d - a); 
      for k=1:3
      rmsf = RMSF2ELxUi2.rmsf{k};
      h1 = plot(iModes,rmsf,'Linewidth',1.4,'color',cDark{1});
      rmsf = RMSF2ETxUi2.rmsf{k};
      h2 = plot(iModes,rmsf,'Linewidth',1.4,'color',cDark{2});
      rmsf = RMSF2ESxUi2.rmsf{k};
      h3 = plot(iModes,rmsf,'Linewidth',1.4,'color',cDark{3});
      rmsf = RMSF2EFxUi2.rmsf{k};
      h4 = plot(iModes,rmsf,'Linewidth',1.9,'color',cLite{1});
      rmsf = RMSF2FLxUi2.rmsf{k};
      h5 = plot(iModes,rmsf,'Linewidth',1.4,'color',cDark{4}); 
      rmsf = RMSF2FTxUi2.rmsf{k};
      h6 = plot(iModes,rmsf,'Linewidth',1.4,'color',cDark{5});
      rmsf = RMSF2FSxUi2.rmsf{k};
      h7 = plot(iModes,rmsf,'Linewidth',1.4,'color',cDark{6});
      rmsf = RMSF2FFxUi2.rmsf{k};
      h8 = plot(iModes,rmsf,'Linewidth',1.9,'color',cLite{2}); 
      end
   title('20000 samples per system');
   xlabel('indifference selection basis vector number');
   ylabel('Ui2-projected RMSF'); 
   legend([h1,h2,h3,h4,h5,h6,h7,h8], ... 
          {'ELx','ETx','ESx','EFx','FLx','FTx','FSx','FFx'}, ...
          'location','best');
%%                               calculate variance on all selection modes
   disp('  ');
   disp( dividerLine('variance distribution on all selection modes') );
   A2ELxSBV = dataStreamProjection('A2ELxSBV',A2ELx,SBV2);
   A2ETxSBV = dataStreamProjection('A2ETxSBV',A2ETx,SBV2);
   A2ESxSBV = dataStreamProjection('A2ESxSBV',A2ESx,SBV2);
   A2EFxSBV = dataStreamProjection('A2EFxSBV',A2EFx,SBV2);
   A2FLxSBV = dataStreamProjection('A2FLxSBV',A2FLx,SBV2);
   A2FTxSBV = dataStreamProjection('A2FTxSBV',A2FTx,SBV2);
   A2FSxSBV = dataStreamProjection('A2FSxSBV',A2FSx,SBV2);
   A2FFxSBV = dataStreamProjection('A2FFxSBV',A2FFx,SBV2);
% ----------------------------------------------------- SBV-projected RMSF
   RMSF2ELxSBV = dataStreamRMSF(A2ELxSBV);
   RMSF2ETxSBV = dataStreamRMSF(A2ETxSBV);
   RMSF2ESxSBV = dataStreamRMSF(A2ESxSBV);
   RMSF2EFxSBV = dataStreamRMSF(A2EFxSBV);
% -----------------------------------------
   RMSF2FLxSBV = dataStreamRMSF(A2FLxSBV);
   RMSF2FTxSBV = dataStreamRMSF(A2FTxSBV);
   RMSF2FSxSBV = dataStreamRMSF(A2FSxSBV);
   RMSF2FFxSBV = dataStreamRMSF(A2FFxSBV);
% --------------------------------------------------- plot variance on SBV
   figure(3);
   clf
   hold on
   sModes = 1:nV;                                     % => selection modes
   maxMSF = -1;
      for k=1:3
      rmsf = RMSF2ELxSBV.rmsf{k};
      msf = rmsf.^2;
      maxMSF = max( [maxMSF,msf] );
      h1 = plot(sModes,msf,'Linewidth',1.4,'color',cDark{1});
      rmsf = RMSF2ETxSBV.rmsf{k};
      msf = rmsf.^2;
      maxMSF = max( [maxMSF,msf] );
      h2 = plot(sModes,msf,'Linewidth',1.4,'color',cDark{2});
      rmsf = RMSF2ESxSBV.rmsf{k};
      msf = rmsf.^2;
      maxMSF = max( [maxMSF,msf] );
      h3 = plot(sModes,msf,'Linewidth',1.4,'color',cDark{3});
      rmsf = RMSF2EFxSBV.rmsf{k};
      msf = rmsf.^2;
      maxMSF = max( [maxMSF,msf] );
      h4 = plot(sModes,msf,'Linewidth',1.9,'color',cLite{1});
      rmsf = RMSF2FLxSBV.rmsf{k};
      msf = rmsf.^2;
      maxMSF = max( [maxMSF,msf] );
      h5 = plot(sModes,msf,'Linewidth',1.4,'color',cDark{4}); 
      rmsf = RMSF2FTxSBV.rmsf{k};
      msf = rmsf.^2;
      maxMSF = max( [maxMSF,msf] );
      h6 = plot(sModes,msf,'Linewidth',1.4,'color',cDark{5});
      rmsf = RMSF2FSxSBV.rmsf{k};
      msf = rmsf.^2;
      maxMSF = max( [maxMSF,msf] );
      h7 = plot(sModes,msf,'Linewidth',1.4,'color',cDark{6});
      rmsf = RMSF2FFxSBV.rmsf{k};
      msf = rmsf.^2;
      maxMSF = max( [maxMSF,msf] );
      h8 = plot(sModes,msf,'Linewidth',1.9,'color',cLite{2}); 
      end
   vLine1_x1 = dimUd2 + 0.5;
   vLine1_x2 = vLine1_x1;
   vLine2_x1 = nV - dimUi2 + 0.5;
   vLine2_x2 = vLine2_x1;
   vLine_y1 = 0;
   vLine_y2 = maxMSF;
   plot( [vLine1_x1,vLine1_x2], [vLine_y1,vLine_y2],'k--', ... 
         'Linewidth',1.3);
   plot( [vLine2_x1,vLine2_x2], [vLine_y1,vLine_y2],'k--', ... 
         'Linewidth',1.3);
   title('20000 samples per system');
   xlabel('selection mode');
   ylabel('variance');
   legend([h1,h2,h3,h4,h5,h6,h7,h8], ... 
          {'ELx','ETx','ESx','EFx','FLx','FTx','FSx','FFx'}, ...
          'location','best');
%%                    check if total variance = trace of Covariance matrix
% %    A2ELxUd2 = dataStreamProjection('A2ELxUd2',A2ELx,Ud2);
% %    A2ETxUd2 = dataStreamProjection('A2ETxUd2',A2ETx,Ud2);
% %    A2ESxUd2 = dataStreamProjection('A2ESxUd2',A2ESx,Ud2);
% %    A2EFxUd2 = dataStreamProjection('A2EFxUd2',A2EFx,Ud2);
% %    A2FLxUd2 = dataStreamProjection('A2FLxUd2',A2FLx,Ud2);
% %    A2FTxUd2 = dataStreamProjection('A2FTxUd2',A2FTx,Ud2);
% %    A2FSxUd2 = dataStreamProjection('A2FSxUd2',A2FSx,Ud2);
% %    A2FFxUd2 = dataStreamProjection('A2FFxUd2',A2FFx,Ud2);
   errorMax = 1.0e-8;
   countErrors = 0;
      for k=1:3
      rmsf = RMSF2ELxSBV.rmsf{k};
      msf = rmsf.^2;
      A = A2ELx.A{k};
      dA = A - mean(A,2);
      Q = (dA*dA')/(A2ELx.nSamples(k) - 1);
      temp = trace(Q) - sum(msf);
         if( abs(temp) > errorMax )
         disp(['error = ',num2str( abs(temp) )]);
         disp('trace for A2ELx covariance matrix not equal to sum MSF');
         countErrors = countErrors + 1;
         end
% -----------------------------------------------
      rmsf = RMSF2ETxSBV.rmsf{k};
      msf = rmsf.^2;
      A = A2ETx.A{k};
      dA = A - mean(A,2);
      Q = (dA*dA')/(A2ETx.nSamples(k) - 1);
      temp = trace(Q) - sum(msf);
         if( abs(temp) > errorMax )
         disp(['error = ',num2str( abs(temp) )]);
         disp('trace for A2ETx covariance matrix not equal to sum MSF');
         countErrors = countErrors + 1;
         end
% -----------------------------------------------
      rmsf = RMSF2ESxSBV.rmsf{k};
      msf = rmsf.^2;
      A = A2ESx.A{k};
      dA = A - mean(A,2);
      Q = (dA*dA')/(A2ESx.nSamples(k) - 1);
      temp = trace(Q) - sum(msf);
         if( abs(temp) > errorMax )
         disp(['error = ',num2str( abs(temp) )]);
         disp('trace for A2ESx covariance matrix not equal to sum MSF');
         countErrors = countErrors + 1;
         end
% -----------------------------------------------
      rmsf = RMSF2EFxSBV.rmsf{k};
      msf = rmsf.^2;
      A = A2EFx.A{k};
      dA = A - mean(A,2);
      Q = (dA*dA')/(A2EFx.nSamples(k) - 1);
      temp = trace(Q) - sum(msf);
         if( abs(temp) > errorMax )
         disp(['error = ',num2str( abs(temp) )]);
         disp('trace for A2EFx covariance matrix not equal to sum MSF');
         countErrors = countErrors + 1;
         end
% -----------------------------------------------
      rmsf = RMSF2FLxSBV.rmsf{k};
      msf = rmsf.^2;
      A = A2FLx.A{k};
      dA = A - mean(A,2);
      Q = (dA*dA')/(A2FLx.nSamples(k) - 1);
      temp = trace(Q) - sum(msf);
         if( abs(temp) > errorMax )
         disp(['error = ',num2str( abs(temp) )]);
         disp('trace for A2FLx covariance matrix not equal to sum MSF');
         countErrors = countErrors + 1;
         end
% -----------------------------------------------
      rmsf = RMSF2FTxSBV.rmsf{k};
      msf = rmsf.^2;
      A = A2FTx.A{k};
      dA = A - mean(A,2);
      Q = (dA*dA')/(A2FTx.nSamples(k) - 1);
      temp = trace(Q) - sum(msf);
         if( abs(temp) > errorMax )
         disp(['error = ',num2str( abs(temp) )]);
         disp('trace for A2FTx covariance matrix not equal to sum MSF');
         countErrors = countErrors + 1;
         end
% -----------------------------------------------
      rmsf = RMSF2FSxSBV.rmsf{k};
      msf = rmsf.^2;
      A = A2FSx.A{k};
      dA = A - mean(A,2);
      Q = (dA*dA')/(A2FSx.nSamples(k) - 1);
      temp = trace(Q) - sum(msf);
         if( abs(temp) > errorMax )
         disp(['error = ',num2str( abs(temp) )]);
         disp('trace for A2FSx covariance matrix not equal to sum MSF');
         countErrors = countErrors + 1;
         end
% -----------------------------------------------
      rmsf = RMSF2FFxSBV.rmsf{k};
      msf = rmsf.^2;
      A = A2FFx.A{k};
      dA = A - mean(A,2);
      Q = (dA*dA')/(A2FFx.nSamples(k) - 1);
      temp = trace(Q) - sum(msf);
         if( abs(temp) > errorMax )
         disp(['error = ',num2str( abs(temp) )]);
         disp('trace for A2FFx covariance matrix not equal to sum MSF');
         countErrors = countErrors + 1;
         end
      end
      if( countErrors < 1 )
      disp('   ');
      disp('TRACE(Q) = sum(MSD) checks for all 24 cases!');
      else
      disp('   ');
      beep
      error('One or more error in TRACE(Q) versus sum(MSD) was found');
      end
   end
%%                            test dataStreamFilter() and dataStreamRMSF()
   if( test_dataStreamFilter )
% --------------------------------------------------------- calculate RMSF
   RMSF1ELx = dataStreamRMSF(A1ELx);
   RMSF1ETx = dataStreamRMSF(A1ETx);
   RMSF1ESx = dataStreamRMSF(A1ESx);
   RMSF1EFx = dataStreamRMSF(A1EFx);
% -----------------------------------
   RMSF1FLx = dataStreamRMSF(A1FLx);
   RMSF1FTx = dataStreamRMSF(A1FTx);
   RMSF1FSx = dataStreamRMSF(A1FSx);
   RMSF1FFx = dataStreamRMSF(A1FFx);
   disp('  ');
   disp( dividerLine('Filtering on discriminant Ud1-subspace') );
   A1ELxUd1 = dataStreamFilter('A1ELxUd1',A1ELx,Ud1);
   A1ETxUd1 = dataStreamFilter('A1ETxUd1',A1ETx,Ud1);
   A1ESxUd1 = dataStreamFilter('A1ESxUd1',A1ESx,Ud1);
   A1EFxUd1 = dataStreamFilter('A1EFxUd1',A1EFx,Ud1);
% ------------------------------------------------------------------------
   A1FLxUd1 = dataStreamFilter('A1FLxUd1',A1FLx,Ud1);
   A1FTxUd1 = dataStreamFilter('A1FTxUd1',A1FTx,Ud1);
   A1FSxUd1 = dataStreamFilter('A1FSxUd1',A1FSx,Ud1);
   A1FFxUd1 = dataStreamFilter('A1FFxUd1',A1FFx,Ud1);
% ------------------------------------------------------ Ud1-filtered RMSF
   RMSF1ELxUd1 = dataStreamRMSF(A1ELxUd1);
   RMSF1ETxUd1 = dataStreamRMSF(A1ETxUd1);
   RMSF1ESxUd1 = dataStreamRMSF(A1ESxUd1);
   RMSF1EFxUd1 = dataStreamRMSF(A1EFxUd1);
% -----------------------------------------
   RMSF1FLxUd1 = dataStreamRMSF(A1FLxUd1);
   RMSF1FTxUd1 = dataStreamRMSF(A1FTxUd1);
   RMSF1FSxUd1 = dataStreamRMSF(A1FSxUd1);
   RMSF1FFxUd1 = dataStreamRMSF(A1FFxUd1);
% -------------------------------------------------------------- plot RMSF
   m = length(RMSF1ELx.rmsf{1});
   atoms = 1:m;
   close all
   figure(1);
   clf
   hold on
      for k=1:3
      rmsf = RMSF1ELx.rmsf{k};
      h1 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{1});
      rmsf = RMSF1ETx.rmsf{k};
      h2 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{2});
      rmsf = RMSF1ESx.rmsf{k};
      h3 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{3});
      rmsf = RMSF1EFx.rmsf{k};
      h4 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{1});
      rmsf = RMSF1FLx.rmsf{k};
      h5 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{4}); 
      rmsf = RMSF1FTx.rmsf{k};
      h6 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{5});
      rmsf = RMSF1FSx.rmsf{k};
      h7 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{6});
      rmsf = RMSF1FFx.rmsf{k};
      h8 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{2}); 
      end
   title('500 samples per system');
   xlabel('atom number');
   ylabel('RMSF');
   legend([h1,h2,h3,h4,h5,h6,h7,h8], ... 
          {'ELx','ETx','ESx','EFx','FLx','FTx','FSx','FFx'}, ...
          'location','best');
% ------------------------------------------------- plot Ud1-filtered RMSF
   figure(2);
   clf
   hold on
      for k=1:3
      rmsf = RMSF1ELxUd1.rmsf{k};
      h1 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{1});
      rmsf = RMSF1ETxUd1.rmsf{k};
      h2 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{2});
      rmsf = RMSF1ESxUd1.rmsf{k};
      h3 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{3});
      rmsf = RMSF1EFxUd1.rmsf{k};
      h4 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{1});
      rmsf = RMSF1FLxUd1.rmsf{k};
      h5 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{4}); 
      rmsf = RMSF1FTxUd1.rmsf{k};
      h6 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{5});
      rmsf = RMSF1FSxUd1.rmsf{k};
      h7 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{6});
      rmsf = RMSF1FFxUd1.rmsf{k};
      h8 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{2}); 
      end
   title('500 samples per system');
   xlabel('atom number');
   ylabel('Ud1-filtered RMSF');
   legend([h1,h2,h3,h4,h5,h6,h7,h8], ... 
          {'ELx','ETx','ESx','EFx','FLx','FTx','FSx','FFx'}, ...
          'location','best');
   pause
%%                                            recalculate using A2 and Ud2
% --------------------------------------------------------- calculate RMSF
   RMSF2ELx = dataStreamRMSF(A2ELx);
   RMSF2ETx = dataStreamRMSF(A2ETx);
   RMSF2ESx = dataStreamRMSF(A2ESx);
   RMSF2EFx = dataStreamRMSF(A2EFx);
% -----------------------------------
   RMSF2FLx = dataStreamRMSF(A2FLx);
   RMSF2FTx = dataStreamRMSF(A2FTx);
   RMSF2FSx = dataStreamRMSF(A2FSx);
   RMSF2FFx = dataStreamRMSF(A2FFx);
   disp('  ');
   disp( dividerLine('Filtering on discriminant Ud2-subspace') );
   A2ELxUd2 = dataStreamFilter('A2ELxUd2',A2ELx,Ud2);
   A2ETxUd2 = dataStreamFilter('A2ETxUd2',A2ETx,Ud2);
   A2ESxUd2 = dataStreamFilter('A2ESxUd2',A2ESx,Ud2);
   A2EFxUd2 = dataStreamFilter('A2EFxUd2',A2EFx,Ud2);
% ------------------------------------------------------------------------
   A2FLxUd2 = dataStreamFilter('A2FLxUd2',A2FLx,Ud2);
   A2FTxUd2 = dataStreamFilter('A2FTxUd2',A2FTx,Ud2);
   A2FSxUd2 = dataStreamFilter('A2FSxUd2',A2FSx,Ud2);
   A2FFxUd2 = dataStreamFilter('A2FFxUd2',A2FFx,Ud2);
% ------------------------------------------------------ Ud2-filtered RMSF
   RMSF2ELxUd2 = dataStreamRMSF(A2ELxUd2);
   RMSF2ETxUd2 = dataStreamRMSF(A2ETxUd2);
   RMSF2ESxUd2 = dataStreamRMSF(A2ESxUd2);
   RMSF2EFxUd2 = dataStreamRMSF(A2EFxUd2);
% -----------------------------------------
   RMSF2FLxUd2 = dataStreamRMSF(A2FLxUd2);
   RMSF2FTxUd2 = dataStreamRMSF(A2FTxUd2);
   RMSF2FSxUd2 = dataStreamRMSF(A2FSxUd2);
   RMSF2FFxUd2 = dataStreamRMSF(A2FFxUd2);
% -------------------------------------------------------------- plot RMSF
   figure(3);
   clf
   hold on
      for k=1:3
      rmsf = RMSF2ELx.rmsf{k};
      h1 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{1});
      rmsf = RMSF2ETx.rmsf{k};
      h2 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{2});
      rmsf = RMSF2ESx.rmsf{k};
      h3 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{3});
      rmsf = RMSF2EFx.rmsf{k};
      h4 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{1});
      rmsf = RMSF2FLx.rmsf{k};
      h5 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{4}); 
      rmsf = RMSF2FTx.rmsf{k};
      h6 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{5});
      rmsf = RMSF2FSx.rmsf{k};
      h7 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{6});
      rmsf = RMSF2FFx.rmsf{k};
      h8 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{2}); 
      end
   title('20000 samples per system');
   xlabel('atom number');
   ylabel('RMSF');
   legend([h1,h2,h3,h4,h5,h6,h7,h8], ... 
          {'ELx','ETx','ESx','EFx','FLx','FTx','FSx','FFx'}, ...
          'location','best');
% ------------------------------------------------- plot Ud2-filtered RMSF
   figure(4);
   clf
   hold on
      for k=1:3
      rmsf = RMSF2ELxUd2.rmsf{k};
      h1 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{1});
      rmsf = RMSF2ETxUd2.rmsf{k};
      h2 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{2});
      rmsf = RMSF2ESxUd2.rmsf{k};
      h3 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{3});
      rmsf = RMSF2EFxUd2.rmsf{k};
      h4 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{1});
      rmsf = RMSF2FLxUd2.rmsf{k};
      h5 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{4}); 
      rmsf = RMSF2FTxUd2.rmsf{k};
      h6 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{5});
      rmsf = RMSF2FSxUd2.rmsf{k};
      h7 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{6});
      rmsf = RMSF2FFxUd2.rmsf{k};
      h8 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{2}); 
      end
   title('20000 samples per system');
   xlabel('atom number');
   ylabel('Ud2-filtered RMSF');
   legend([h1,h2,h3,h4,h5,h6,h7,h8], ... 
          {'ELx','ETx','ESx','EFx','FLx','FTx','FSx','FFx'}, ...
          'location','best');
%%                                             calculate Ui2-filtered RMSF
   disp('  ');
   disp( dividerLine('Filtering on indifference Ui2-subspace') );
   A2ELxUi2 = dataStreamFilter('A2ELxUi2',A2ELx,Ui2);
   A2ETxUi2 = dataStreamFilter('A2ETxUi2',A2ETx,Ui2);
   A2ESxUi2 = dataStreamFilter('A2ETxUi2',A2ESx,Ui2);
   A2EFxUi2 = dataStreamFilter('A2EFxUi2',A2EFx,Ui2);
% ------------------------------------------------------------------------
   A2FLxUi2 = dataStreamFilter('A2FLxUi2',A2FLx,Ui2);
   A2FTxUi2 = dataStreamFilter('A2FTxUi2',A2FTx,Ui2);
   A2FSxUi2 = dataStreamFilter('A2FTxUi2',A2FSx,Ui2);
   A2FFxUi2 = dataStreamFilter('A2FFxUi2',A2FFx,Ui2);
% ------------------------------------------------------ Ui2-filtered RMSF
   RMSF2ELxUi2 = dataStreamRMSF(A2ELxUi2);
   RMSF2ETxUi2 = dataStreamRMSF(A2ETxUi2);
   RMSF2ESxUi2 = dataStreamRMSF(A2ESxUi2);
   RMSF2EFxUi2 = dataStreamRMSF(A2EFxUi2);
% -----------------------------------------
   RMSF2FLxUi2 = dataStreamRMSF(A2FLxUi2);
   RMSF2FTxUi2 = dataStreamRMSF(A2FTxUi2);
   RMSF2FSxUi2 = dataStreamRMSF(A2FSxUi2);
   RMSF2FFxUi2 = dataStreamRMSF(A2FFxUi2);
% ------------------------------------------------- plot Ui2-filtered RMSF
   figure(5);
   clf
   hold on
      for k=1:3
      rmsf = RMSF2ELxUi2.rmsf{k};
      h1 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{1});
      rmsf = RMSF2ETxUi2.rmsf{k};
      h2 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{2});
      rmsf = RMSF2ESxUi2.rmsf{k};
      h3 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{3});
      rmsf = RMSF2EFxUi2.rmsf{k};
      h4 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{1});
      rmsf = RMSF2FLxUi2.rmsf{k};
      h5 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{4}); 
      rmsf = RMSF2FTxUi2.rmsf{k};
      h6 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{5});
      rmsf = RMSF2FSxUi2.rmsf{k};
      h7 = plot(atoms,rmsf,'Linewidth',1.4,'color',cDark{6});
      rmsf = RMSF2FFxUi2.rmsf{k};
      h8 = plot(atoms,rmsf,'Linewidth',1.9,'color',cLite{2}); 
      end
   title('20000 samples per system');
   xlabel('atom number');
   ylabel('Ui2-filtered RMSF');  
   legend([h1,h2,h3,h4,h5,h6,h7,h8], ... 
          {'ELx','ETx','ESx','EFx','FLx','FTx','FSx','FFx'}, ...
          'location','best');
   end
%%                                 test congruency overlaps with PCA modes
   if( test_congruencyOverlaps )
   close all
   disp('  ');
   disp( dividerLine('select PCA modes') );
   disp('1. pooled nonfunctional covariance matrix');
   disp('2. pooled functional covariance matrix');
   disp('3. pooled nonfunctional and functional covariance matrix');
   disp(dividerLine);
   disp('  ');
   ipca = input('enter option: ');
      switch ipca
      case 1
      PCAt = PCA0t;
      PCAd = PCA0d;
      PCAi = PCA0i;
      case 2
      PCAt = PCA1t;
      PCAd = PCA1d;
      PCAi = PCA1i;
      case 3
      PCAt = PCA2t;
      PCAd = PCA2d;
      PCAi = PCA2i;
      otherwise
      error('option not available');
      end
   disp('   ');
   disp( dividerLine('PCA mode congruency overlaps') );
   wd = zeros(1,nV);
   wi = zeros(1,nV);
   x = 1:nV;
   count_wd = 0;
   count_wi = 0;
      for k=1:nV
      V = PCAt(:,k);
      wd(k) = getRMSIP(V,Ud2);
         if( wd(k) > 0.85 ) 
         count_wd = count_wd + 1;
         end
      wi(k) = getRMSIP(V,Ui2);
         if( wi(k) > 0.85 ) 
         count_wi = count_wi + 1;
         end
      end
   disp(['# of modes overlaping with discriminant subspace = ', ...
         num2str(count_wd)]);
   disp(['# of modes overlaping with indifference subspace = ', ...
         num2str(count_wi)]);
   disp('  ');
   figure(1);
   plot(x,wd,'r','linewidth',1.8);
   hold on;
   plot(x,wi,'b','linewidth',1.8);
   title('PCA mode relevance against SPLOC basis subset');
   ylabel('RMSIP between PCA-mode and U subspace');
   xlabel('PCA mode');
   legend('discriminant','indifference','location','best'); 
% ---------------------------------------------------------- 
   ns = 5000;  %=> split data into 4 groups per system
   trait2F4 = getMultivariateStats4sploc(AmatrixInfo2F,ns,0,mType);
   trait2N4 = getMultivariateStats4sploc(AmatrixInfo2N,ns,0,mType);
   fname = 'PCAsplocSpectrum';
   splocResultsPCA = getBasisVecSpectrum(PCAt,fname,trait2F4,trait2N4);
   plotCongruencySpectrum(splocResultsPCA,3);
   end
%%                                                  test traitProjection()
   if( test_traitProjection )
   trait1FLxUd1 = traitProjection('A1FLxUd1',trait1FLx,Ud1);
   trait1FFxUd1 = traitProjection('A1FFxUd1',trait1FFx,Ud1);
% ----------------------------------------- capture four interesting cases
   disp('   ');
   disp( dividerLine(['data source = ',trait1FLxUd1.mMatrixName{1}]) );
   cMatrixFLF1 = trait1FLxUd1.cM{1};
   averageFLF1 = trait1FLxUd1.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait1FLxUd1.mMatrixName{2}]) );
   cMatrixFLL1 = trait1FLxUd1.cM{2};
   averageFLL1 = trait1FLxUd1.mu{2};
% ---------------------------------------------------
   disp('   ');
   disp( dividerLine(['data source = ',trait1FFxUd1.mMatrixName{1}]) );
   cMatrixFFF1 = trait1FFxUd1.cM{1};
   averageFFF1 = trait1FFxUd1.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait1FFxUd1.mMatrixName{2}]) );
   cMatrixFFL1 = trait1FFxUd1.cM{2};
   averageFFL1 = trait1FFxUd1.mu{2};
% ------------------------------------------------------------------------
   x = 1:dimUd1;
   figure(1);
   clf;
   plot(x,averageFFF1,'r','linewidth',1.8);
   hold on;
   plot(x,averageFFL1,'m','linewidth',1.8);
   plot(x,averageFLF1,'b','linewidth',1.8);
   plot(x,averageFLL1,'k','linewidth',1.8);
   xlabel('mode index');
   ylabel(['average ',cName,' A-matrix centroid']);
   title('500 samples and projection using Ud1');
   legend('FFF','FFL','FLF','FLL');
% ------------------------------------------------------------------------
   M = cell(1,4);
   M{1} = cMatrixFFF1;
   M{2} = cMatrixFFL1;
   M{3} = cMatrixFLF1;
   M{4} = cMatrixFLL1;
% ----------------------
   t = cell(1,4);
   t{1} = ['500 samples ',cName,': FFF projected by U1d'];
   t{2} = ['500 samples ',cName,': FFL projected by U1d']; 
   t{3} = ['500 samples ',cName,': FLF projected by U1d'];
   t{4} = ['500 samples ',cName,': FLL projected by U1d'];
% ----------------------
   colorMatrixTool(M,3,'zSymm','yes','tLabel',t,'xLabel','mode index', ...
                   'yLabel','mode index','bLabel','Q projection', ...
                   'xLimit',[1,dimUd1],'yLimit',[1,dimUd1], ...
                   'cType','r0b','scale','std','cutlower',3, ...
                    'cutupper',3);
%%                                                     repeat for case Ud2
   pause
   close all
   trait2FLxUd2 = traitProjection('A2FLxUd2',trait2FLx,Ud2);
   trait2FFxUd2 = traitProjection('A2FFxUd2',trait2FFx,Ud2);
% ----------------------------------------- capture four interesting cases
   disp('   ');
   disp( dividerLine(['data source = ',trait2FLxUd2.mMatrixName{1}]) );
   cMatrixFLF2 = trait2FLxUd2.cM{1};
   averageFLF2 = trait2FLxUd2.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait2FLxUd2.mMatrixName{2}]) );
   cMatrixFLL2 = trait2FLxUd2.cM{2};
   averageFLL2 = trait2FLxUd2.mu{2};
% ---------------------------------------------------
   disp('   ');
   disp( dividerLine(['data source = ',trait2FFxUd2.mMatrixName{1}]) );
   cMatrixFFF2 = trait2FFxUd2.cM{1};
   averageFFF2 = trait2FFxUd2.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait2FFxUd2.mMatrixName{2}]) );
   cMatrixFFL2 = trait2FFxUd2.cM{2};
   averageFFL2 = trait2FFxUd2.mu{2};
% ------------------------------------------------------------------------
   x = 1:dimUd2;
   figure(1);
   clf;
   plot(x,averageFFF2,'r','linewidth',1.8);
   hold on;
   plot(x,averageFFL2,'m','linewidth',1.8);
   plot(x,averageFLF2,'b','linewidth',1.8);
   plot(x,averageFLL2,'k','linewidth',1.8);
   xlabel('mode index');
   ylabel(['average ',cName,' A-matrix centroid']);
   title('20000 samples and projection using Ud2');
   legend('FFF','FFL','FLF','FLL');
% ------------------------------------------------------------------------
   M = cell(1,4);
   M{1} = cMatrixFFF2;
   M{2} = cMatrixFFL2;
   M{3} = cMatrixFLF2;
   M{4} = cMatrixFLL2;
% ----------------------
   t = cell(1,4);
   t{1} = ['20000 samples ',cName,': FFF projected by U2d'];
   t{2} = ['20000 samples ',cName,': FFL projected by U2d']; 
   t{3} = ['20000 samples ',cName,': FLF projected by U2d'];
   t{4} = ['20000 samples ',cName,': FLL projected by U2d'];
% ----------------------
   colorMatrixTool(M,3,'zSymm','yes','tLabel',t,'xLabel','mode index', ...
                   'yLabel','mode index','bLabel','Q projection', ...
                   'xLimit',[1,dimUd2],'yLimit',[1,dimUd2], ...
                    'cType','r0b','scale','std','cutlower',3, ...
                    'cutupper',3);
   pause;
%%                                          repeat everything above for Ui
   disp('   ');
   disp( dividerLine('apply on 20000 sample dataset Ui2') );
   close all
   trait2FLxUi2 = traitProjection('A2FLxUi2',trait2FLx,Ui2);
   trait2FFxUi2 = traitProjection('A2FFxUi2',trait2FFx,Ui2);
% ----------------------------------------- capture four interesting cases
   disp('   ');
   disp( dividerLine(['data source = ',trait2FLxUi2.mMatrixName{1}]) );
   cMatrixFLF2 = trait2FLxUi2.cM{1};
   averageFLF2 = trait2FLxUi2.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait2FLxUi2.mMatrixName{2}]) );
   cMatrixFLL2 = trait2FLxUi2.cM{2};
   averageFLL2 = trait2FLxUi2.mu{2};
% ---------------------------------------------------
   disp('   ');
   disp( dividerLine(['data source = ',trait2FFxUi2.mMatrixName{1}]) );
   cMatrixFFF2 = trait2FFxUi2.cM{1};
   averageFFF2 = trait2FFxUi2.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait2FFxUi2.mMatrixName{2}]) );
   cMatrixFFL2 = trait2FFxUi2.cM{2};
   averageFFL2 = trait2FFxUi2.mu{2};
% ------------------------------------------------------------------------
   x = (nV-dimUi2+1):nV;
   figure(1);
   clf;
   plot(x,averageFFF2,'r','linewidth',1.8);
   hold on;
   plot(x,averageFFL2,'m','linewidth',1.8);
   plot(x,averageFLF2,'b','linewidth',1.8);
   plot(x,averageFLL2,'k','linewidth',1.8);
   xlabel('mode index');
   ylabel(['average ',cName,' A-matrix centroid']);
   title('20000 samples and projection using Ui2');
   legend('FFF','FFL','FLF','FLL');
% ------------------------------------------------------------------------
   M = cell(1,4);
   M{1} = cMatrixFFF2;
   M{2} = cMatrixFFL2;
   M{3} = cMatrixFLF2;
   M{4} = cMatrixFLL2;
% ----------------------
   t = cell(1,4);
   t{1} = ['20000 samples ',cName,': FFF projected by U2i'];
   t{2} = ['20000 samples ',cName,': FFL projected by U2i']; 
   t{3} = ['20000 samples ',cName,': FLF projected by U2i'];
   t{4} = ['20000 samples ',cName,': FLL projected by U2i'];
% ----------------------
   colorMatrixTool(M,1,'zSymm','yes','tLabel',t,'xLabel','mode index', ...
                   'yLabel','mode index','bLabel','Q projection', ...
                   'xLimit',[nV-dimUi2,nV],'yLimit',[nV-dimUi2,nV], ...
                   'cType','r0b','scale','std','cutlower',3, ...
                    'cutupper',3);
   end
   
   
%%                                                      test traitFilter()
   if( test_traitFilter )
   close all
   trait1FLxUd1 = traitFilter('A1FLxUd1',trait1FLx,Ud1);
   trait1FFxUd1 = traitFilter('A1FFxUd1',trait1FFx,Ud1);
% ----------------------------------------- capture four interesting cases
   disp('   ');
   disp( dividerLine(['data source = ',trait1FLxUd1.mMatrixName{1}]) );
   cMatrixFLF1 = trait1FLxUd1.cM{1};
   averageFLF1 = trait1FLxUd1.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait1FLxUd1.mMatrixName{2}]) );
   cMatrixFLL1 = trait1FLxUd1.cM{2};
   averageFLL1 = trait1FLxUd1.mu{2};
% ---------------------------------------------------
   disp('   ');
   disp( dividerLine(['data source = ',trait1FFxUd1.mMatrixName{1}]) );
   cMatrixFFF1 = trait1FFxUd1.cM{1};
   averageFFF1 = trait1FFxUd1.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait1FFxUd1.mMatrixName{2}]) );
   cMatrixFFL1 = trait1FFxUd1.cM{2};
   averageFFL1 = trait1FFxUd1.mu{2};
% ------------------------------------------------------------------------
   x = 1:nV;
   figure(1);
   clf;
   plot(x,averageFFF1,'r','linewidth',1.8);
   hold on;
   plot(x,averageFFL1,'m','linewidth',1.8);
   plot(x,averageFLF1,'b','linewidth',1.8);
   plot(x,averageFLL1,'k','linewidth',1.8);
   xlabel('mode index');
   ylabel(['average ',cName,' A-matrix centroid']);
   title('500 samples filtered using Ud1');
   legend('FFF','FFL','FLF','FLL');
% ------------------------------------------------------------------------
   M = cell(1,4);
   M{1} = cMatrixFFF1;
   M{2} = cMatrixFFL1;
   M{3} = cMatrixFLF1;
   M{4} = cMatrixFLL1;
% ----------------------
   t = cell(1,4);
   t{1} = ['500 samples ',cName,': FFF filtered by U1d'];
   t{2} = ['500 samples ',cName,': FFL filtered by U1d']; 
   t{3} = ['500 samples ',cName,': FLF filtered by U1d'];
   t{4} = ['500 samples ',cName,': FLL filtered by U1d'];
% ----------------------
   colorMatrixTool(M,3,'zSymm','yes','tLabel',t,'xLabel','mode index', ...
                   'yLabel','mode index','bLabel','Q projection', ...
                   'xLimit',[1,nV],'yLimit',[1,nV],'cType','r0b', ...
                   'scale','std','cutlower',3,'cutupper',3);
   pause
   disp('   ');
   disp( dividerLine('calculating reduced matrix') );
   rM = cell(1,4);
   dim = trait1FFxUd1.dim;
   pType = trait1FFxUd1.pType; 
      for i=1:4
      rM{i} = reduceCmatrix(M{i},pType,dim);
      end
   k = nV/dim;
   t{1} = ['500 samples ',cName,': reduced FFF filtered by U1d'];
   t{2} = ['500 samples ',cName,': reduced FFL filtered by U1d']; 
   t{3} = ['500 samples ',cName,': reduced FLF filtered by U1d'];
   t{4} = ['500 samples ',cName,': reduced FLL filtered by U1d'];
   colorMatrixTool(rM,3,'zSymm','yes','tLabel',t,'xLabel','mode index',...
                   'yLabel','mode index','bLabel','Q projection', ...
                   'xLimit',[1,k],'yLimit',[1,k],'cType','r0b', ...
                   'scale','std','cutlower',3,'cutupper',3);
%%                                                     repeat for case Ud2
   pause
   close all
   trait2FLxUd2 = traitFilter('A2FLxUd2',trait2FLx,Ud2);
   trait2FFxUd2 = traitFilter('A2FFxUd2',trait2FFx,Ud2);
% ----------------------------------------- capture four interesting cases
   disp('   ');
   disp( dividerLine(['data source = ',trait2FLxUd2.mMatrixName{1}]) );
   cMatrixFLF2 = trait2FLxUd2.cM{1};
   averageFLF2 = trait2FLxUd2.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait2FLxUd2.mMatrixName{2}]) );
   cMatrixFLL2 = trait2FLxUd2.cM{2};
   averageFLL2 = trait2FLxUd2.mu{2};
% ---------------------------------------------------
   disp('   ');
   disp( dividerLine(['data source = ',trait2FFxUd2.mMatrixName{1}]) );
   cMatrixFFF2 = trait2FFxUd2.cM{1};
   averageFFF2 = trait2FFxUd2.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait2FFxUd2.mMatrixName{2}]) );
   cMatrixFFL2 = trait2FFxUd2.cM{2};
   averageFFL2 = trait2FFxUd2.mu{2};
% ------------------------------------------------------------------------
   x = 1:nV;
   figure(1);
   clf;
   plot(x,averageFFF2,'r','linewidth',1.8);
   hold on;
   plot(x,averageFFL2,'m','linewidth',1.8);
   plot(x,averageFLF2,'b','linewidth',1.8);
   plot(x,averageFLL2,'k','linewidth',1.8);
   xlabel('mode index');
   ylabel(['average ',cName,' A-matrix centroid']);
   title('20000 samples filtered using Ud2');
   legend('FFF','FFL','FLF','FLL');
% ------------------------------------------------------------------------
   M = cell(1,4);
   M{1} = cMatrixFFF2;
   M{2} = cMatrixFFL2;
   M{3} = cMatrixFLF2;
   M{4} = cMatrixFLL2;
% ----------------------
   t = cell(1,4);
   t{1} = ['20000 samples ',cName,': FFF filtered by U2d'];
   t{2} = ['20000 samples ',cName,': FFL filtered by U2d']; 
   t{3} = ['20000 samples ',cName,': FLF filtered by U2d'];
   t{4} = ['20000 samples ',cName,': FLL filtered by U2d'];
% ----------------------
   colorMatrixTool(M,3,'zSymm','yes','tLabel',t,'xLabel','mode index', ...
                   'yLabel','mode index','bLabel','Q projection', ...
                   'xLimit',[1,nV],'yLimit',[1,nV],'cType','r0b', ...
                   'scale','std','cutlower',3,'cutupper',3);  
   pause;
   disp('   ');
   disp( dividerLine('calculating reduced matrix') );
   reduced_trait2FLxUd2 = traitFilter('A2FLxUd2',trait2FLx,Ud2,'reduce');
   reduced_trait2FFxUd2 = traitFilter('A2FFxUd2',trait2FFx,Ud2,'reduce');
% ----------------------------------------- capture four interesting cases
   reduced_cMatrixFLF2 = reduced_trait2FLxUd2.cM{1};
   reduced_cMatrixFLL2 = reduced_trait2FLxUd2.cM{2};
% ---------------------------------------------------
   reduced_cMatrixFFF2 = reduced_trait2FFxUd2.cM{1};
   reduced_cMatrixFFL2 = reduced_trait2FFxUd2.cM{2};
% ------------------------------------------------------------------------
   M = cell(1,4);
   M{1} = reduced_cMatrixFFF2;
   M{2} = reduced_cMatrixFFL2;
   M{3} = reduced_cMatrixFLF2;
   M{4} = reduced_cMatrixFLL2;
% ----------------------
   t = cell(1,4);
   t{1} = ['20000 samples ',cName,': reduced FFF filtered by U2d'];
   t{2} = ['20000 samples ',cName,': reduced FFL filtered by U2d']; 
   t{3} = ['20000 samples ',cName,': reduced FLF filtered by U2d'];
   t{4} = ['20000 samples ',cName,': reduced FLL filtered by U2d'];
% ----------------------
   k = reduced_trait2FLxUd2.nVariables;
   colorMatrixTool(M,3,'zSymm','yes','tLabel',t,'xLabel','mode index', ...
                   'yLabel','mode index','bLabel','Q projection', ...
                   'xLimit',[1,k],'yLimit',[1,k],'cType','r0b', ...
                   'scale','std','cutlower',3,'cutupper',3);  
   pause;   
%%                                          repeat everything above for Ui
   disp('   ');
   disp( dividerLine('apply on 20000 sample dataset Ui2') );
   close all
   trait2FLxUi2 = traitFilter('A2FLxUi2',trait2FLx,Ui2);
   trait2FFxUi2 = traitFilter('A2FFxUi2',trait2FFx,Ui2);
% ----------------------------------------- capture four interesting cases
   disp('   ');
   disp( dividerLine(['data source = ',trait2FLxUi2.mMatrixName{1}]) );
   cMatrixFLF2 = trait2FLxUi2.cM{1};
   averageFLF2 = trait2FLxUi2.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait2FLxUi2.mMatrixName{2}]) );
   cMatrixFLL2 = trait2FLxUi2.cM{2};
   averageFLL2 = trait2FLxUi2.mu{2};
% ---------------------------------------------------
   disp('   ');
   disp( dividerLine(['data source = ',trait2FFxUi2.mMatrixName{1}]) );
   cMatrixFFF2 = trait2FFxUi2.cM{1};
   averageFFF2 = trait2FFxUi2.mu{1};
   disp('   ');
   disp( dividerLine(['data source = ',trait2FFxUi2.mMatrixName{2}]) );
   cMatrixFFL2 = trait2FFxUi2.cM{2};
   averageFFL2 = trait2FFxUi2.mu{2};
% ------------------------------------------------------------------------
   x = 1:nV;
   figure(1);
   clf;
   plot(x,averageFFF2,'r','linewidth',1.8);
   hold on;
   plot(x,averageFFL2,'m','linewidth',1.8);
   plot(x,averageFLF2,'b','linewidth',1.8);
   plot(x,averageFLL2,'k','linewidth',1.8);
   xlabel('mode index');
   ylabel(['average ',cName,' A-matrix centroid']);
   title('20000 samples filtered using Ui2');
   legend('FFF','FFL','FLF','FLL');
% ------------------------------------------------------------------------
   M = cell(1,4);
   M{1} = cMatrixFFF2;
   M{2} = cMatrixFFL2;
   M{3} = cMatrixFLF2;
   M{4} = cMatrixFLL2;
% ----------------------
   t = cell(1,4);
   t{1} = ['20000 samples ',cName,': FFF filtered by U2i'];
   t{2} = ['20000 samples ',cName,': FFL filtered by U2i']; 
   t{3} = ['20000 samples ',cName,': FLF filtered by U2i'];
   t{4} = ['20000 samples ',cName,': FLL filtered by U2i'];
% ----------------------
   colorMatrixTool(M,1,'zSymm','yes','tLabel',t,'xLabel','mode index', ...
                   'yLabel','mode index','bLabel','Q projection', ...
                   'xLimit',[1,nV],'yLimit',[1,nV],'cType','r0b', ...
                   'scale','std','cutlower',3,'cutupper',3);
   pause
   disp('   ');
   disp( dividerLine('calculating reduced matrix') );
   rM = cell(1,4);
   dim = trait2FLxUi2.dim;
   pType = trait2FLxUi2.pType; 
      for i=1:4
      rM{i} = reduceCmatrix(M{i},pType,dim);
      end
   k = nV/dim;
   t{1} = ['20000 samples ',cName,': reduced FFF filtered by U2i'];
   t{2} = ['20000 samples ',cName,': reduced FFL filtered by U2i']; 
   t{3} = ['20000 samples ',cName,': reduced FLF filtered by U2i'];
   t{4} = ['20000 samples ',cName,': reduced FLL filtered by U2i'];
   colorMatrixTool(rM,3,'zSymm','yes','tLabel',t,'xLabel','mode index',...
                   'yLabel','mode index','bLabel','Q projection', ...
                   'xLimit',[1,k],'yLimit',[1,k],'cType','r0b', ...
                   'scale','std','cutlower',3,'cutupper',3);
   end
%%                                                     test showDynamics()
% REMARK: The function showDynamics() is a sploc analysis tool that can be
% used on any problem that starts with a data stream. 
   if( test_showDynamics )
%%                             get trajectories that explore conformations
   cFLF = A2FLx.A{1}; 
   cFLL = A2FLx.A{2};
   cFFF = A2FFx.A{1}; 
   cFFL = A2FFx.A{2};
   % -----------------------------
   cFLLm = showDynamics(cFLL);
   cFLLd = showDynamics(cFLL,Ud2);
   cFLLi = showDynamics(cFLL,Ui2);
   % -----------------------------
   cFFLm = showDynamics(cFFL);
   cFFLd = showDynamics(cFFL,Ud2);
   cFFLi = showDynamics(cFFL,Ui2); 
   % -----------------------------
   cFLFm = showDynamics(cFLF);
   cFLFd = showDynamics(cFLF,Ud2);
   cFLFi = showDynamics(cFLF,Ui2);
   % -----------------------------
   cFFFm = showDynamics(cFFF);
   cFFFd = showDynamics(cFFF,Ud2);
   cFFFi = showDynamics(cFFF,Ui2);  
%%                                    bond list for synthetic 2D molecules
% REMARK: functions for movies are specialized to the 2D synthetic data.
% The code to make movies (below this section) are not sploc functions.
% They are written here to see the movies, and they provide example code 
% for other similar problems. 
   bondList = [ 1  6;  6  7;  7  8;  2  8;  8  9;  9 10;  3 10; 10 11; ...
            11 12;  4 12; 12 13; 13 14;  5 14; 14 15;  6 15; 14 16; ...
            15 16; 16 17; 17 18; 18 19;  7 20; 20 21; 21 22;  9 23; ...
            10 23; 23 24; 24 25; 25 26; 12 27; 27 28; 28 29];
   [Nb,~] = size(bondList);
%%                                             show full motion comparison
   nx = nV/2;
   ix = 1:nx;
   iy = nx + ix;
%  quadrants: FLL => (+5,+5) FFL => (-5,+5) FLF => (+5,-5) FFF => (-5,-5)
   xFLL = cFLLm(ix,:) + 7.5;
   yFLL = cFLLm(iy,:) + 7.5;
   
   xFFL = cFFLm(ix,:) - 7.5;
   yFFL = cFFLm(iy,:) + 7.5;
   
   xFLF = cFLFm(ix,:) + 7.5;
   yFLF = cFLFm(iy,:) - 7.5;
   
   xFFF = cFFFm(ix,:) - 7.5;
   yFFF = cFFFm(iy,:) - 7.5;
%  systems:  FLL => black   FFL => red    FLF => blue    FFF => magenta
 % -----------------------------------------------------------------------  
   [~,nt] = size(xFLL);
      for t=1:nt
      figure(1)
      clf
      hold on;
% ---------------------------------------------- place all bonds in system
         for b=1:Nb
         k1 = bondList(b,1);
         k2 = bondList(b,2);
         xline = [xFLL(k1,t),xFLL(k2,t)];
         yline = [yFLL(k1,t),yFLL(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         % -----------------------------------
         xline = [xFFL(k1,t),xFFL(k2,t)];
         yline = [yFFL(k1,t),yFFL(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         % -----------------------------------
         xline = [xFLF(k1,t),xFLF(k2,t)];
         yline = [yFLF(k1,t),yFLF(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         % -----------------------------------
         xline = [xFFF(k1,t),xFFF(k2,t)];
         yline = [yFFF(k1,t),yFFF(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         end
% ------------------------------------------ place all atoms in the system
      h1 = plot(xFLL(:,t),yFLL(:,t),'o','MarkerEdgeColor','k', ...
                                    'MarkerFaceColor','k','MarkerSize',8);
      h2 = plot(xFFL(:,t),yFFL(:,t),'o','MarkerEdgeColor','m', ...
                                    'MarkerFaceColor','m','MarkerSize',8);
      h3 = plot(xFLF(:,t),yFLF(:,t),'o','MarkerEdgeColor','b', ...
                                    'MarkerFaceColor','b','MarkerSize',8);
      h4 = plot(xFFF(:,t),yFFF(:,t),'o','MarkerEdgeColor','r', ...
                                    'MarkerFaceColor','r','MarkerSize',8);
      xlim( [-15,15] );
      ylim( [-15,15] );
      temp = round(100*t/nt);
      title(['molecular motions: %t = ',num2str(temp,'%3i')]);
      legend([h1,h2,h3,h4],{'FLL','FFL','FLF','FFF'}, ...
             'location','eastoutside');
         if( 50*round(t/50) == t )
         pause(2);
         end
      end
%%                                     show discriminant motion comparison      
   nx = nV/2;
   ix = 1:nx;
   iy = nx + ix;
%  quadrants: FLL => (+5,+5) FFL => (-5,+5) FLF => (+5,-5) FFF => (-5,-5)
   xFLL = cFLLd(ix,:) + 7.5;
   yFLL = cFLLd(iy,:) + 7.5;
   
   xFFL = cFFLd(ix,:) - 7.5;
   yFFL = cFFLd(iy,:) + 7.5;
   
   xFLF = cFLFd(ix,:) + 7.5;
   yFLF = cFLFd(iy,:) - 7.5;
   
   xFFF = cFFFd(ix,:) - 7.5;
   yFFF = cFFFd(iy,:) - 7.5;
%  systems:  FLL => black   FFL => red    FLF => blue    FFF => magenta
 % -----------------------------------------------------------------------  
   [~,nt] = size(xFLL);
      for t=1:nt
      figure(1)
      clf
      hold on;
% ---------------------------------------------- place all bonds in system
         for b=1:Nb
         k1 = bondList(b,1);
         k2 = bondList(b,2);
         xline = [xFLL(k1,t),xFLL(k2,t)];
         yline = [yFLL(k1,t),yFLL(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         % -----------------------------------
         xline = [xFFL(k1,t),xFFL(k2,t)];
         yline = [yFFL(k1,t),yFFL(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         % -----------------------------------
         xline = [xFLF(k1,t),xFLF(k2,t)];
         yline = [yFLF(k1,t),yFLF(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         % -----------------------------------
         xline = [xFFF(k1,t),xFFF(k2,t)];
         yline = [yFFF(k1,t),yFFF(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         end
% ------------------------------------------ place all atoms in the system
      h1 = plot(xFLL(:,t),yFLL(:,t),'o','MarkerEdgeColor','k', ...
                                    'MarkerFaceColor','k','MarkerSize',8);
      h2 = plot(xFFL(:,t),yFFL(:,t),'o','MarkerEdgeColor','m', ...
                                    'MarkerFaceColor','m','MarkerSize',8);
      h3 = plot(xFLF(:,t),yFLF(:,t),'o','MarkerEdgeColor','b', ...
                                    'MarkerFaceColor','b','MarkerSize',8);
      h4 = plot(xFFF(:,t),yFFF(:,t),'o','MarkerEdgeColor','r', ...
                                    'MarkerFaceColor','r','MarkerSize',8);
      xlim( [-15,15] );
      ylim( [-15,15] );
      temp = round(100*t/nt);
      title(['functional motions: %t = ',num2str(temp,'%3i')]);
      legend([h1,h2,h3,h4],{'FLL','FFL','FLF','FFF'}, ...
             'location','eastoutside');
         if( 50*round(t/50) == t )
         pause(2);
         end
      end
%%                                     show indifference motion comparison     
   nx = nV/2;
   ix = 1:nx;
   iy = nx + ix;
%  quadrants: FLL => (+5,+5) FFL => (-5,+5) FLF => (+5,-5) FFF => (-5,-5)
   xFLL = cFLLi(ix,:) + 7.5;
   yFLL = cFLLi(iy,:) + 7.5;
   
   xFFL = cFFLi(ix,:) - 7.5;
   yFFL = cFFLi(iy,:) + 7.5;
   
   xFLF = cFLFi(ix,:) + 7.5;
   yFLF = cFLFi(iy,:) - 7.5;
   
   xFFF = cFFFi(ix,:) - 7.5;
   yFFF = cFFFi(iy,:) - 7.5;
%  systems:  FLL => black   FFL => red    FLF => blue    FFF => magenta
 % -----------------------------------------------------------------------  
   [~,nt] = size(xFLL);
      for t=1:nt
      figure(1)
      clf
      hold on;
% ---------------------------------------------- place all bonds in system
         for b=1:Nb
         k1 = bondList(b,1);
         k2 = bondList(b,2);
         xline = [xFLL(k1,t),xFLL(k2,t)];
         yline = [yFLL(k1,t),yFLL(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         % -----------------------------------
         xline = [xFFL(k1,t),xFFL(k2,t)];
         yline = [yFFL(k1,t),yFFL(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         % -----------------------------------
         xline = [xFLF(k1,t),xFLF(k2,t)];
         yline = [yFLF(k1,t),yFLF(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         % -----------------------------------
         xline = [xFFF(k1,t),xFFF(k2,t)];
         yline = [yFFF(k1,t),yFFF(k2,t)];
         plot(xline,yline,'g','linewidth',1.8);
         end
% ------------------------------------------ place all atoms in the system
      h1 = plot(xFLL(:,t),yFLL(:,t),'o','MarkerEdgeColor','k', ...
                                    'MarkerFaceColor','k','MarkerSize',8);
      h2 = plot(xFFL(:,t),yFFL(:,t),'o','MarkerEdgeColor','m', ...
                                    'MarkerFaceColor','m','MarkerSize',8);
      h3 = plot(xFLF(:,t),yFLF(:,t),'o','MarkerEdgeColor','b', ...
                                    'MarkerFaceColor','b','MarkerSize',8);
      h4 = plot(xFFF(:,t),yFFF(:,t),'o','MarkerEdgeColor','r', ...
                                    'MarkerFaceColor','r','MarkerSize',8);
      xlim( [-15,15] );
      ylim( [-15,15] );
      temp = round(100*t/nt);
      title(['conserved motions: %t = ',num2str(temp,'%3i')]);
      legend([h1,h2,h3,h4],{'FLL','FFL','FLF','FFF'}, ...
             'location','eastoutside');
         if( 50*round(t/50) == t )
         pause(2);
         end
      end 
   end
